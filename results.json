{"$.sol": "'solc --version' running\n'solc C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset\\$.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset' running\n\n$.constructor(string,string,uint256,uint256,address,address).feeReceiver_ (get_source/dataset/$.sol#683) lacks a zero-check on :\n\t\t- address(feeReceiver_).transfer(msg.value) (get_source/dataset/$.sol#687)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation\n\nContext._msgData() (get_source/dataset/$.sol#241-247) is never used and should be removed\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code\n\nPragma version^0.8.0 (get_source/dataset/$.sol#7) allows old versions\nPragma version^0.8.0 (get_source/dataset/$.sol#167) allows old versions\nPragma version^0.8.0 (get_source/dataset/$.sol#225) allows old versions\nPragma version^0.8.0 (get_source/dataset/$.sol#261) allows old versions\nPragma version^0.8.0 (get_source/dataset/$.sol#665) allows old versions\nsolc-0.8.0 is not recommended for deployment\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity\n\nContract $ (get_source/dataset/$.sol#669-692) is not in CapWords\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\n\nRedundant expression \"this (get_source/dataset/$.sol#243)\" inContext (get_source/dataset/$.sol#231-249)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements\nC:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset\\$.sol analyzed (5 contracts with 93 detectors), 10 result(s) found\n", "$MLG.sol": "'solc --version' running\n'solc C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset\\$MLG.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset' running\n\nReentrancy in $MLG._transfer(address,address,uint256) (get_source/dataset/$MLG.sol#659-783):\n\tExternal calls:\n\t- swapTokensForEth(contractTokenBalance) (get_source/dataset/$MLG.sol#723)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/$MLG.sol#797-809)\n\tExternal calls sending eth:\n\t- sendETHToFee(address(this).balance) (get_source/dataset/$MLG.sol#729)\n\t\t- _marketingAddress.transfer(amount) (get_source/dataset/$MLG.sol#817)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rTeam) (get_source/dataset/$MLG.sol#943)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (get_source/dataset/$MLG.sol#923)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (get_source/dataset/$MLG.sol#925)\n\t$MLG._rOwned (get_source/dataset/$MLG.sol#335) can be used in cross function reentrancies:\n\t- $MLG._takeTeam(uint256) (get_source/dataset/$MLG.sol#937-945)\n\t- $MLG._transferStandard(address,address,uint256) (get_source/dataset/$MLG.sol#897-933)\n\t- $MLG.balanceOf(address) (get_source/dataset/$MLG.sol#485-489)\n\t- $MLG.constructor() (get_source/dataset/$MLG.sol#419-449)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _rTotal = _rTotal.sub(rFee) (get_source/dataset/$MLG.sol#951)\n\t$MLG._rTotal (get_source/dataset/$MLG.sol#347) can be used in cross function reentrancies:\n\t- $MLG._getCurrentSupply() (get_source/dataset/$MLG.sol#1093-1103)\n\t- $MLG._reflectFee(uint256,uint256) (get_source/dataset/$MLG.sol#949-955)\n\t- $MLG.constructor() (get_source/dataset/$MLG.sol#419-449)\n\t- $MLG.tokenFromReflection(uint256) (get_source/dataset/$MLG.sol#581-603)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities\n\n$MLG.allowance(address,address).owner (get_source/dataset/$MLG.sol#511) shadows:\n\t- Ownable.owner() (get_source/dataset/$MLG.sol#113-117) (function)\n$MLG._approve(address,address,uint256).owner (get_source/dataset/$MLG.sol#639) shadows:\n\t- Ownable.owner() (get_source/dataset/$MLG.sol#113-117) (function)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing\n\n$MLG.setFee(uint256,uint256,uint256,uint256) (get_source/dataset/$MLG.sol#1107-1117) should emit an event for: \n\t- _redisFeeOnBuy = redisFeeOnBuy (get_source/dataset/$MLG.sol#1109) \n\t- _redisFeeOnSell = redisFeeOnSell (get_source/dataset/$MLG.sol#1111) \n\t- _taxFeeOnBuy = taxFeeOnBuy (get_source/dataset/$MLG.sol#1113) \n\t- _taxFeeOnSell = taxFeeOnSell (get_source/dataset/$MLG.sol#1115) \n$MLG.setMinSwapTokensThreshold(uint256) (get_source/dataset/$MLG.sol#1123-1127) should emit an event for: \n\t- _swapTokensAtAmount = swapTokensAtAmount (get_source/dataset/$MLG.sol#1125) \n$MLG.setMaxTxnAmount(uint256) (get_source/dataset/$MLG.sol#1143-1147) should emit an event for: \n\t- _maxTxAmount = maxTxAmount (get_source/dataset/$MLG.sol#1145) \n$MLG.setMaxWalletSize(uint256) (get_source/dataset/$MLG.sol#1151-1155) should emit an event for: \n\t- _maxWalletSize = maxWalletSize (get_source/dataset/$MLG.sol#1153) \nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic\n\nReentrancy in $MLG._transfer(address,address,uint256) (get_source/dataset/$MLG.sol#659-783):\n\tExternal calls:\n\t- swapTokensForEth(contractTokenBalance) (get_source/dataset/$MLG.sol#723)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/$MLG.sol#797-809)\n\tExternal calls sending eth:\n\t- sendETHToFee(address(this).balance) (get_source/dataset/$MLG.sol#729)\n\t\t- _marketingAddress.transfer(amount) (get_source/dataset/$MLG.sol#817)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _previousredisFee = _redisFee (get_source/dataset/$MLG.sol#613)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _previoustaxFee = _taxFee (get_source/dataset/$MLG.sol#615)\n\t- _redisFee = _redisFeeOnBuy (get_source/dataset/$MLG.sol#757)\n\t- _redisFee = _redisFeeOnSell (get_source/dataset/$MLG.sol#769)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _redisFee = _previousredisFee (get_source/dataset/$MLG.sol#629)\n\t\t- _redisFee = 0 (get_source/dataset/$MLG.sol#619)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (get_source/dataset/$MLG.sol#953)\n\t- _taxFee = _taxFeeOnBuy (get_source/dataset/$MLG.sol#759)\n\t- _taxFee = _taxFeeOnSell (get_source/dataset/$MLG.sol#771)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _taxFee = _previoustaxFee (get_source/dataset/$MLG.sol#631)\n\t\t- _taxFee = 0 (get_source/dataset/$MLG.sol#621)\nReentrancy in $MLG.transferFrom(address,address,uint256) (get_source/dataset/$MLG.sol#547-577):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/$MLG.sol#557)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/$MLG.sol#797-809)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/$MLG.sol#557)\n\t\t- _marketingAddress.transfer(amount) (get_source/dataset/$MLG.sol#817)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (get_source/dataset/$MLG.sol#559-573)\n\t\t- _allowances[owner][spender] = amount (get_source/dataset/$MLG.sol#651)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2\n\nReentrancy in $MLG._transfer(address,address,uint256) (get_source/dataset/$MLG.sol#659-783):\n\tExternal calls:\n\t- swapTokensForEth(contractTokenBalance) (get_source/dataset/$MLG.sol#723)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/$MLG.sol#797-809)\n\tExternal calls sending eth:\n\t- sendETHToFee(address(this).balance) (get_source/dataset/$MLG.sol#729)\n\t\t- _marketingAddress.transfer(amount) (get_source/dataset/$MLG.sol#817)\n\tEvent emitted after the call(s):\n\t- Transfer(sender,recipient,tTransferAmount) (get_source/dataset/$MLG.sol#931)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\nReentrancy in $MLG.transferFrom(address,address,uint256) (get_source/dataset/$MLG.sol#547-577):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/$MLG.sol#557)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/$MLG.sol#797-809)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/$MLG.sol#557)\n\t\t- _marketingAddress.transfer(amount) (get_source/dataset/$MLG.sol#817)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (get_source/dataset/$MLG.sol#653)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (get_source/dataset/$MLG.sol#559-573)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3\n\n$MLG._redisFee (get_source/dataset/$MLG.sol#363) is set pre-construction with a non-constant function or state variable:\n\t- _redisFeeOnSell\n$MLG._taxFee (get_source/dataset/$MLG.sol#365) is set pre-construction with a non-constant function or state variable:\n\t- _taxFeeOnSell\n$MLG._previousredisFee (get_source/dataset/$MLG.sol#369) is set pre-construction with a non-constant function or state variable:\n\t- _redisFee\n$MLG._previoustaxFee (get_source/dataset/$MLG.sol#371) is set pre-construction with a non-constant function or state variable:\n\t- _taxFee\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state\n\nPragma version^0.8.20 (get_source/dataset/$MLG.sol#19) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\nsolc-0.8.20 is not recommended for deployment\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity\n\nFunction IUniswapV2Router02.WETH() (get_source/dataset/$MLG.sol#281) is not in mixedCase\nContract $MLG (get_source/dataset/$MLG.sol#319-1172) is not in CapWords\nFunction $MLG.SetTrading(bool) (get_source/dataset/$MLG.sol#823-827) is not in mixedCase\nParameter $MLG.SetTrading(bool)._tradingOpen (get_source/dataset/$MLG.sol#823) is not in mixedCase\nParameter $MLG.toggleSwap(bool)._swapEnabled (get_source/dataset/$MLG.sol#1133) is not in mixedCase\nConstant $MLG._name (get_source/dataset/$MLG.sol#327) is not in UPPER_CASE_WITH_UNDERSCORES\nConstant $MLG._symbol (get_source/dataset/$MLG.sol#329) is not in UPPER_CASE_WITH_UNDERSCORES\nConstant $MLG._decimals (get_source/dataset/$MLG.sol#331) is not in UPPER_CASE_WITH_UNDERSCORES\nConstant $MLG._tTotal (get_source/dataset/$MLG.sol#345) is not in UPPER_CASE_WITH_UNDERSCORES\nVariable $MLG._buyMap (get_source/dataset/$MLG.sol#375) is not in mixedCase\nVariable $MLG._maxTxAmount (get_source/dataset/$MLG.sol#397) is not in mixedCase\nVariable $MLG._maxWalletSize (get_source/dataset/$MLG.sol#399) is not in mixedCase\nVariable $MLG._swapTokensAtAmount (get_source/dataset/$MLG.sol#401) is not in mixedCase\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\n\nReentrancy in $MLG._transfer(address,address,uint256) (get_source/dataset/$MLG.sol#659-783):\n\tExternal calls:\n\t- sendETHToFee(address(this).balance) (get_source/dataset/$MLG.sol#729)\n\t\t- _marketingAddress.transfer(amount) (get_source/dataset/$MLG.sol#817)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _previousredisFee = _redisFee (get_source/dataset/$MLG.sol#613)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _previoustaxFee = _taxFee (get_source/dataset/$MLG.sol#615)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rTeam) (get_source/dataset/$MLG.sol#943)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (get_source/dataset/$MLG.sol#923)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (get_source/dataset/$MLG.sol#925)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _rTotal = _rTotal.sub(rFee) (get_source/dataset/$MLG.sol#951)\n\t- _redisFee = _redisFeeOnBuy (get_source/dataset/$MLG.sol#757)\n\t- _redisFee = _redisFeeOnSell (get_source/dataset/$MLG.sol#769)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _redisFee = _previousredisFee (get_source/dataset/$MLG.sol#629)\n\t\t- _redisFee = 0 (get_source/dataset/$MLG.sol#619)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (get_source/dataset/$MLG.sol#953)\n\t- _taxFee = _taxFeeOnBuy (get_source/dataset/$MLG.sol#759)\n\t- _taxFee = _taxFeeOnSell (get_source/dataset/$MLG.sol#771)\n\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\n\t\t- _taxFee = _previoustaxFee (get_source/dataset/$MLG.sol#631)\n\t\t- _taxFee = 0 (get_source/dataset/$MLG.sol#621)\n\tEvent emitted after the call(s):\n\t- Transfer(sender,recipient,tTransferAmount) (get_source/dataset/$MLG.sol#931)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (get_source/dataset/$MLG.sol#781)\nReentrancy in $MLG.transferFrom(address,address,uint256) (get_source/dataset/$MLG.sol#547-577):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/$MLG.sol#557)\n\t\t- _marketingAddress.transfer(amount) (get_source/dataset/$MLG.sol#817)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (get_source/dataset/$MLG.sol#559-573)\n\t\t- _allowances[owner][spender] = amount (get_source/dataset/$MLG.sol#651)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (get_source/dataset/$MLG.sol#653)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (get_source/dataset/$MLG.sol#559-573)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4\n\nVariable $MLG._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (get_source/dataset/$MLG.sol#1075) is too similar to $MLG._getTValues(uint256,uint256,uint256).tTransferAmount (get_source/dataset/$MLG.sol#1033)\nVariable $MLG._transferStandard(address,address,uint256).rTransferAmount (get_source/dataset/$MLG.sol#911) is too similar to $MLG._transferStandard(address,address,uint256).tTransferAmount (get_source/dataset/$MLG.sol#915)\nVariable $MLG._transferStandard(address,address,uint256).rTransferAmount (get_source/dataset/$MLG.sol#911) is too similar to $MLG._getValues(uint256).tTransferAmount (get_source/dataset/$MLG.sol#987)\nVariable $MLG._getValues(uint256).rTransferAmount (get_source/dataset/$MLG.sol#993) is too similar to $MLG._getTValues(uint256,uint256,uint256).tTransferAmount (get_source/dataset/$MLG.sol#1033)\nVariable $MLG._transferStandard(address,address,uint256).rTransferAmount (get_source/dataset/$MLG.sol#911) is too similar to $MLG._getTValues(uint256,uint256,uint256).tTransferAmount (get_source/dataset/$MLG.sol#1033)\nVariable $MLG._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (get_source/dataset/$MLG.sol#1075) is too similar to $MLG._getValues(uint256).tTransferAmount (get_source/dataset/$MLG.sol#987)\nVariable $MLG._getValues(uint256).rTransferAmount (get_source/dataset/$MLG.sol#993) is too similar to $MLG._getValues(uint256).tTransferAmount (get_source/dataset/$MLG.sol#987)\nVariable $MLG._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (get_source/dataset/$MLG.sol#1075) is too similar to $MLG._transferStandard(address,address,uint256).tTransferAmount (get_source/dataset/$MLG.sol#915)\nVariable $MLG._getValues(uint256).rTransferAmount (get_source/dataset/$MLG.sol#993) is too similar to $MLG._transferStandard(address,address,uint256).tTransferAmount (get_source/dataset/$MLG.sol#915)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar\n\n$MLG.slitherConstructorVariables() (get_source/dataset/$MLG.sol#319-1172) uses literals with too many digits:\n\t- _maxTxAmount = 5000000 * 10 ** 9 (get_source/dataset/$MLG.sol#397)\n$MLG.slitherConstructorVariables() (get_source/dataset/$MLG.sol#319-1172) uses literals with too many digits:\n\t- _maxWalletSize = 5000000 * 10 ** 9 (get_source/dataset/$MLG.sol#399)\n$MLG.slitherConstructorConstantVariables() (get_source/dataset/$MLG.sol#319-1172) uses literals with too many digits:\n\t- _tTotal = 1000000000 * 10 ** 9 (get_source/dataset/$MLG.sol#345)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits\n\n$MLG._tOwned (get_source/dataset/$MLG.sol#337) is never used in $MLG (get_source/dataset/$MLG.sol#319-1172)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable\n\n$MLG._developmentAddress (get_source/dataset/$MLG.sol#377) should be constant \n$MLG._marketingAddress (get_source/dataset/$MLG.sol#379) should be constant \nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant\n\n$MLG.uniswapV2Pair (get_source/dataset/$MLG.sol#385) should be immutable \n$MLG.uniswapV2Router (get_source/dataset/$MLG.sol#383) should be immutable \nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable\nC:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset\\$MLG.sol analyzed (7 contracts with 93 detectors), 49 result(s) found\n", "$REKT.sol": "'solc --version' running\n'solc C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset\\$REKT.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset' running\nCompilation warnings/errors on C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset\\$REKT.sol:\nError: Source file requires different compiler version (current compiler is 0.8.0+commit.c7dfd78e.Windows.msvc) - note that nightly builds are considered to be strictly less than the released version\n\n   --> C:/Users/Admin/OneDrive/Documents/GitHub/Blockchain-Smart-Contract-Security/get_source/dataset/$REKT.sol:636:1:\n\n    |\n\n636 | pragma solidity ^0.8.9;\n\n\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n\nTraceback (most recent call last):\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\crytic_compile\\platform\\solc.py\", line 582, in _run_solc\n    ret: Dict = json.loads(stdout)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\json\\__init__.py\", line 357, in loads\n    return _default_decoder.decode(s)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\json\\decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\runpy.py\", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\runpy.py\", line 87, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python38\\Scripts\\slither.exe\\__main__.py\", line 7, in <module>\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\slither\\__main__.py\", line 727, in main\n    main_impl(all_detector_classes=detectors, all_printer_classes=printers)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\slither\\__main__.py\", line 833, in main_impl\n    ) = process_all(filename, args, detector_classes, printer_classes)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\slither\\__main__.py\", line 96, in process_all\n    compilations = compile_all(target, **vars(args))\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\crytic_compile\\crytic_compile.py\", line 718, in compile_all\n    compilations.append(CryticCompile(target, **kwargs))\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\crytic_compile\\crytic_compile.py\", line 207, in __init__\n    self._compile(**kwargs)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\crytic_compile\\crytic_compile.py\", line 629, in _compile\n    self._platform.compile(self, **kwargs)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\crytic_compile\\platform\\solc.py\", line 151, in compile\n    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\crytic_compile\\platform\\solc.py\", line 280, in _get_targets_json\n    return _run_solc(\n  File \"c:\\users\\admin\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\crytic_compile\\platform\\solc.py\", line 586, in _run_solc\n    raise InvalidCompilation(f\"Invalid solc compilation {stderr}\")\ncrytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation Error: Source file requires different compiler version (current compiler is 0.8.0+commit.c7dfd78e.Windows.msvc) - note that nightly builds are considered to be strictly less than the released version\n\n   --> C:/Users/Admin/OneDrive/Documents/GitHub/Blockchain-Smart-Contract-Security/get_source/dataset/$REKT.sol:636:1:\n\n    |\n\n636 | pragma solidity ^0.8.9;\n\n\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n\n", "_401k.sol": "'solc --version' running\n'solc C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset\\_401k.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,C:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset' running\n\n_401k.sendETHToFee(uint256) (get_source/dataset/_401k.sol#571-575) sends eth to arbitrary user\n\tDangerous calls:\n\t- _taxWallet.transfer(amount) (get_source/dataset/_401k.sol#573)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations\n\nReentrancy in _401k._transfer(address,address,uint256) (get_source/dataset/_401k.sol#423-515):\n\tExternal calls:\n\t- swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap))) (get_source/dataset/_401k.sol#485)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/_401k.sol#539-551)\n\tExternal calls sending eth:\n\t- sendETHToFee(address(this).balance) (get_source/dataset/_401k.sol#491)\n\t\t- _taxWallet.transfer(amount) (get_source/dataset/_401k.sol#573)\n\tState variables written after the call(s):\n\t- _balances[address(this)] = _balances[address(this)].add(taxAmount) (get_source/dataset/_401k.sol#503)\n\t_401k._balances (get_source/dataset/_401k.sol#233) can be used in cross function reentrancies:\n\t- _401k._transfer(address,address,uint256) (get_source/dataset/_401k.sol#423-515)\n\t- _401k.balanceOf(address) (get_source/dataset/_401k.sol#361-365)\n\t- _401k.constructor() (get_source/dataset/_401k.sol#309-325)\n\t- _balances[from] = _balances[from].sub(amount) (get_source/dataset/_401k.sol#509)\n\t_401k._balances (get_source/dataset/_401k.sol#233) can be used in cross function reentrancies:\n\t- _401k._transfer(address,address,uint256) (get_source/dataset/_401k.sol#423-515)\n\t- _401k.balanceOf(address) (get_source/dataset/_401k.sol#361-365)\n\t- _401k.constructor() (get_source/dataset/_401k.sol#309-325)\n\t- _balances[to] = _balances[to].add(amount.sub(taxAmount)) (get_source/dataset/_401k.sol#511)\n\t_401k._balances (get_source/dataset/_401k.sol#233) can be used in cross function reentrancies:\n\t- _401k._transfer(address,address,uint256) (get_source/dataset/_401k.sol#423-515)\n\t- _401k.balanceOf(address) (get_source/dataset/_401k.sol#361-365)\n\t- _401k.constructor() (get_source/dataset/_401k.sol#309-325)\nReentrancy in _401k.openTrading() (get_source/dataset/_401k.sol#581-599):\n\tExternal calls:\n\t- uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH()) (get_source/dataset/_401k.sol#589)\n\t- uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp) (get_source/dataset/_401k.sol#591)\n\t- IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type()(uint256).max) (get_source/dataset/_401k.sol#593)\n\tExternal calls sending eth:\n\t- uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp) (get_source/dataset/_401k.sol#591)\n\tState variables written after the call(s):\n\t- tradingOpen = true (get_source/dataset/_401k.sol#597)\n\t_401k.tradingOpen (get_source/dataset/_401k.sol#287) can be used in cross function reentrancies:\n\t- _401k.openTrading() (get_source/dataset/_401k.sol#581-599)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities\n\n_401k._transfer(address,address,uint256) (get_source/dataset/_401k.sol#423-515) uses tx.origin for authorization: require(bool,string)(_holderLastTransferTimestamp[tx.origin] < block.number,_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.) (get_source/dataset/_401k.sol#443-451)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-usage-of-txorigin\n\n_401k.openTrading() (get_source/dataset/_401k.sol#581-599) ignores return value by uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp) (get_source/dataset/_401k.sol#591)\n_401k.openTrading() (get_source/dataset/_401k.sol#581-599) ignores return value by IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type()(uint256).max) (get_source/dataset/_401k.sol#593)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return\n\n_401k.allowance(address,address).owner (get_source/dataset/_401k.sol#379) shadows:\n\t- Ownable.owner() (get_source/dataset/_401k.sol#149-153) (function)\n_401k._approve(address,address,uint256).owner (get_source/dataset/_401k.sol#409) shadows:\n\t- Ownable.owner() (get_source/dataset/_401k.sol#149-153) (function)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing\n\nReentrancy in _401k.openTrading() (get_source/dataset/_401k.sol#581-599):\n\tExternal calls:\n\t- uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH()) (get_source/dataset/_401k.sol#589)\n\t- uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp) (get_source/dataset/_401k.sol#591)\n\t- IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type()(uint256).max) (get_source/dataset/_401k.sol#593)\n\tExternal calls sending eth:\n\t- uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp) (get_source/dataset/_401k.sol#591)\n\tState variables written after the call(s):\n\t- swapEnabled = true (get_source/dataset/_401k.sol#595)\nReentrancy in _401k.transferFrom(address,address,uint256) (get_source/dataset/_401k.sol#397-405):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/_401k.sol#399)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/_401k.sol#539-551)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/_401k.sol#399)\n\t\t- _taxWallet.transfer(amount) (get_source/dataset/_401k.sol#573)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (get_source/dataset/_401k.sol#401)\n\t\t- _allowances[owner][spender] = amount (get_source/dataset/_401k.sol#415)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2\n\nReentrancy in _401k._transfer(address,address,uint256) (get_source/dataset/_401k.sol#423-515):\n\tExternal calls:\n\t- swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap))) (get_source/dataset/_401k.sol#485)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/_401k.sol#539-551)\n\tExternal calls sending eth:\n\t- sendETHToFee(address(this).balance) (get_source/dataset/_401k.sol#491)\n\t\t- _taxWallet.transfer(amount) (get_source/dataset/_401k.sol#573)\n\tEvent emitted after the call(s):\n\t- Transfer(from,address(this),taxAmount) (get_source/dataset/_401k.sol#505)\n\t- Transfer(from,to,amount.sub(taxAmount)) (get_source/dataset/_401k.sol#513)\nReentrancy in _401k.transferFrom(address,address,uint256) (get_source/dataset/_401k.sol#397-405):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/_401k.sol#399)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (get_source/dataset/_401k.sol#539-551)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/_401k.sol#399)\n\t\t- _taxWallet.transfer(amount) (get_source/dataset/_401k.sol#573)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (get_source/dataset/_401k.sol#417)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (get_source/dataset/_401k.sol#401)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3\n\nPragma version^0.8.20 (get_source/dataset/_401k.sol#15) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\nsolc-0.8.20 is not recommended for deployment\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity\n\nFunction IUniswapV2Router02.WETH() (get_source/dataset/_401k.sol#207) is not in mixedCase\nContract _401k (get_source/dataset/_401k.sol#229-630) is not in CapWords\nConstant _401k._decimals (get_source/dataset/_401k.sol#265) is not in UPPER_CASE_WITH_UNDERSCORES\nConstant _401k._tTotal (get_source/dataset/_401k.sol#267) is not in UPPER_CASE_WITH_UNDERSCORES\nConstant _401k._name (get_source/dataset/_401k.sol#269) is not in UPPER_CASE_WITH_UNDERSCORES\nConstant _401k._symbol (get_source/dataset/_401k.sol#271) is not in UPPER_CASE_WITH_UNDERSCORES\nVariable _401k._maxTxAmount (get_source/dataset/_401k.sol#273) is not in mixedCase\nVariable _401k._maxWalletSize (get_source/dataset/_401k.sol#275) is not in mixedCase\nVariable _401k._taxSwapThreshold (get_source/dataset/_401k.sol#277) is not in mixedCase\nVariable _401k._maxTaxSwap (get_source/dataset/_401k.sol#279) is not in mixedCase\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\n\nReentrancy in _401k._transfer(address,address,uint256) (get_source/dataset/_401k.sol#423-515):\n\tExternal calls:\n\t- sendETHToFee(address(this).balance) (get_source/dataset/_401k.sol#491)\n\t\t- _taxWallet.transfer(amount) (get_source/dataset/_401k.sol#573)\n\tState variables written after the call(s):\n\t- _balances[address(this)] = _balances[address(this)].add(taxAmount) (get_source/dataset/_401k.sol#503)\n\t- _balances[from] = _balances[from].sub(amount) (get_source/dataset/_401k.sol#509)\n\t- _balances[to] = _balances[to].add(amount.sub(taxAmount)) (get_source/dataset/_401k.sol#511)\n\tEvent emitted after the call(s):\n\t- Transfer(from,address(this),taxAmount) (get_source/dataset/_401k.sol#505)\n\t- Transfer(from,to,amount.sub(taxAmount)) (get_source/dataset/_401k.sol#513)\nReentrancy in _401k.transferFrom(address,address,uint256) (get_source/dataset/_401k.sol#397-405):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (get_source/dataset/_401k.sol#399)\n\t\t- _taxWallet.transfer(amount) (get_source/dataset/_401k.sol#573)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (get_source/dataset/_401k.sol#401)\n\t\t- _allowances[owner][spender] = amount (get_source/dataset/_401k.sol#415)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (get_source/dataset/_401k.sol#417)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (get_source/dataset/_401k.sol#401)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4\n\n_401k._transfer(address,address,uint256) (get_source/dataset/_401k.sol#423-515) uses literals with too many digits:\n\t- contractETHBalance > 50000000000000000 (get_source/dataset/_401k.sol#489)\n_401k.slitherConstructorVariables() (get_source/dataset/_401k.sol#229-630) uses literals with too many digits:\n\t- _maxTxAmount = 20000000 * 10 ** _decimals (get_source/dataset/_401k.sol#273)\n_401k.slitherConstructorVariables() (get_source/dataset/_401k.sol#229-630) uses literals with too many digits:\n\t- _maxWalletSize = 20000000 * 10 ** _decimals (get_source/dataset/_401k.sol#275)\n_401k.slitherConstructorVariables() (get_source/dataset/_401k.sol#229-630) uses literals with too many digits:\n\t- _taxSwapThreshold = 1500000 * 10 ** _decimals (get_source/dataset/_401k.sol#277)\n_401k.slitherConstructorVariables() (get_source/dataset/_401k.sol#229-630) uses literals with too many digits:\n\t- _maxTaxSwap = 1500000 * 10 ** _decimals (get_source/dataset/_401k.sol#279)\n_401k.slitherConstructorConstantVariables() (get_source/dataset/_401k.sol#229-630) uses literals with too many digits:\n\t- _tTotal = 1000000000 * 10 ** _decimals (get_source/dataset/_401k.sol#267)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits\n\n_401k._finalBuyTax (get_source/dataset/_401k.sol#251) should be constant \n_401k._finalSellTax (get_source/dataset/_401k.sol#253) should be constant \n_401k._initialBuyTax (get_source/dataset/_401k.sol#247) should be constant \n_401k._initialSellTax (get_source/dataset/_401k.sol#249) should be constant \n_401k._maxTaxSwap (get_source/dataset/_401k.sol#279) should be constant \n_401k._preventSwapBefore (get_source/dataset/_401k.sol#259) should be constant \n_401k._reduceBuyTaxAt (get_source/dataset/_401k.sol#255) should be constant \n_401k._reduceSellTaxAt (get_source/dataset/_401k.sol#257) should be constant \n_401k._taxSwapThreshold (get_source/dataset/_401k.sol#277) should be constant \nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant\n\n_401k._taxWallet (get_source/dataset/_401k.sol#243) should be immutable \nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable\nC:\\Users\\Admin\\OneDrive\\Documents\\GitHub\\Blockchain-Smart-Contract-Security\\get_source\\dataset\\_401k.sol analyzed (7 contracts with 93 detectors), 42 result(s) found\n"}