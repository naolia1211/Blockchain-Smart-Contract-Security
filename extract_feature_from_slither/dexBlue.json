{
    "success": true,
    "error": null,
    "results": {
        "detectors": [
            {
                "description": "dexBlue (dexBlue.sol#2895-5247) contract sets array length with a user-controlled value:\n\t- public_reserve_arr.push(reserve) (dexBlue.sol#4993)\n",
                "markdown": "[dexBlue](dexBlue.sol#L2895-L5247) contract sets array length with a user-controlled value:\n\t- [public_reserve_arr.push(reserve)](dexBlue.sol#L4993)\n",
                "first_markdown_element": "dexBlue.sol#L2895-L5247",
                "id": "5b46f838acca9a14a7e6c07281387e9a6a9b07d6c7938e2456720485b17310d3",
                "check": "controlled-array-length",
                "impact": "High",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue (dexBlue.sol#2895-5247) contract sets array length with a user-controlled value:\n\t- token_arr.push(token) (dexBlue.sol#5061)\n",
                "markdown": "[dexBlue](dexBlue.sol#L2895-L5247) contract sets array length with a user-controlled value:\n\t- [token_arr.push(token)](dexBlue.sol#L5061)\n",
                "first_markdown_element": "dexBlue.sol#L2895-L5247",
                "id": "cd3fc531f89c8ace0250f8c7babea3ac446f46d02d5a683548612a7025b47363",
                "check": "controlled-array-length",
                "impact": "High",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (dexBlue.sol#4033-4051)\n\t- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (dexBlue.sol#4061)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\tExternal calls sending eth:\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\tState variables written after the call(s):\n\t- balances[trade.makerToken][makerReserve] -= trade.makerAmount (dexBlue.sol#4107)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (dexBlue.sol#3423-3439)\n\t- dexBlue.depositEther() (dexBlue.sol#2911-2917)\n\t- dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009)\n\t- dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981)\n\t- dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245)\n\t- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989)\n\t- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175)\n\t- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (dexBlue.sol#4193-4271)\n\t- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (dexBlue.sol#4291-4373)\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519)\n\t- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135)\n\t- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3157-3211)\n\t- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount)](dexBlue.sol#L4033-L4051)\n\t- [Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee)](dexBlue.sol#L4061)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\tExternal calls sending eth:\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\tState variables written after the call(s):\n\t- [balances[trade.makerToken][makerReserve] -= trade.makerAmount](dexBlue.sol#L4107)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlue.blockFundsForSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3423-L3439)\n\t- [dexBlue.depositEther()](dexBlue.sol#L2911-L2917)\n\t- [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009)\n\t- [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981)\n\t- [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245)\n\t- [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989)\n\t- [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175)\n\t- [dexBlue.executeReserveTrade(address,uint256,address,uint256,address)](dexBlue.sol#L4193-L4271)\n\t- [dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[])](dexBlue.sol#L4291-L4373)\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519)\n\t- [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135)\n\t- [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3157-L3211)\n\t- [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405)\n",
                "first_markdown_element": "dexBlue.sol#L4009-L4175",
                "id": "1fcc35af9e565fb2e4e26e8e5ce6bf1ef8a04891cb0a72ee347df32e46074e4b",
                "check": "reentrancy-eth",
                "impact": "High",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (dexBlue.sol#3851-3867)\n\t- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (dexBlue.sol#3877)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\tExternal calls sending eth:\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\tState variables written after the call(s):\n\t- balances[trade.makerToken][makerReserve] -= trade.makerAmount (dexBlue.sol#3921)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (dexBlue.sol#3423-3439)\n\t- dexBlue.depositEther() (dexBlue.sol#2911-2917)\n\t- dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009)\n\t- dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981)\n\t- dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245)\n\t- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989)\n\t- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175)\n\t- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (dexBlue.sol#4193-4271)\n\t- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (dexBlue.sol#4291-4373)\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519)\n\t- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135)\n\t- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3157-3211)\n\t- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount)](dexBlue.sol#L3851-L3867)\n\t- [Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee)](dexBlue.sol#L3877)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\tExternal calls sending eth:\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\tState variables written after the call(s):\n\t- [balances[trade.makerToken][makerReserve] -= trade.makerAmount](dexBlue.sol#L3921)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlue.blockFundsForSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3423-L3439)\n\t- [dexBlue.depositEther()](dexBlue.sol#L2911-L2917)\n\t- [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009)\n\t- [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981)\n\t- [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245)\n\t- [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989)\n\t- [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175)\n\t- [dexBlue.executeReserveTrade(address,uint256,address,uint256,address)](dexBlue.sol#L4193-L4271)\n\t- [dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[])](dexBlue.sol#L4291-L4373)\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519)\n\t- [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135)\n\t- [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3157-L3211)\n\t- [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405)\n",
                "first_markdown_element": "dexBlue.sol#L3831-L3989",
                "id": "3b974fa36eda0a102bf5e55fe037db0d331b80b103dfaea899bb093318e7e8d8",
                "check": "reentrancy-eth",
                "impact": "High",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (dexBlue.sol#2059-2075)\n\t- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (dexBlue.sol#2085)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\tExternal calls sending eth:\n\t- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\tState variables written after the call(s):\n\t- balances[trades[i].giveToken][reserve] -= trades[i].giveAmount - trades[i].rebate (dexBlue.sol#2125)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.sellToken][order.signee] -= trades[i].giveAmount - trades[i].rebate (dexBlue.sol#2187)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[trades[prev].giveToken][order.signee] += trades[prev].giveAmount - trades[i].fee (dexBlue.sol#2193)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[trades[prev].giveToken][feeCollector] += trades[i].fee - trades[prev].rebate (dexBlue.sol#2217)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- matched[order.hash] += trades[i].giveAmount - trades[i].rebate (dexBlue.sol#2199)\n\tdexBlueStorage.matched (dexBlue.sol#165) can be used in cross function reentrancies:\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount)](dexBlue.sol#L2059-L2075)\n\t- [Token(trades[prev].giveToken).transfer(reserve,receiveAmount)](dexBlue.sol#L2085)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\tExternal calls sending eth:\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\tState variables written after the call(s):\n\t- [balances[trades[i].giveToken][reserve] -= trades[i].giveAmount - trades[i].rebate](dexBlue.sol#L2125)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.sellToken][order.signee] -= trades[i].giveAmount - trades[i].rebate](dexBlue.sol#L2187)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[trades[prev].giveToken][order.signee] += trades[prev].giveAmount - trades[i].fee](dexBlue.sol#L2193)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[trades[prev].giveToken][feeCollector] += trades[i].fee - trades[prev].rebate](dexBlue.sol#L2217)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [matched[order.hash] += trades[i].giveAmount - trades[i].rebate](dexBlue.sol#L2199)\n\t[dexBlueStorage.matched](dexBlue.sol#L165) can be used in cross function reentrancies:\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n",
                "first_markdown_element": "dexBlue.sol#L1991-L2287",
                "id": "56b0b77b8c754120779c4a481fab1e44a0c4a743c87899cfaeb8c8845b116160",
                "check": "reentrancy-eth",
                "impact": "High",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (dexBlue.sol#2379-2397)\n\t- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (dexBlue.sol#2407)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\tExternal calls sending eth:\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\tState variables written after the call(s):\n\t- balances[trades[i].giveToken][reserve] -= trades[i].giveAmount - trades[i].rebate (dexBlue.sol#2449)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.sellToken][order.signee] -= trades[i].giveAmount - trades[i].rebate (dexBlue.sol#2511)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[trades[prev].giveToken][order.signee] += trades[prev].giveAmount - trades[i].fee (dexBlue.sol#2517)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[trades[prev].giveToken][feeCollector] += trades[i].fee - trades[prev].rebate (dexBlue.sol#2541)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- matched[order.hash] += trades[i].giveAmount - trades[i].rebate (dexBlue.sol#2523)\n\tdexBlueStorage.matched (dexBlue.sol#165) can be used in cross function reentrancies:\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount)](dexBlue.sol#L2379-L2397)\n\t- [Token(trades[prev].giveToken).transfer(reserve,receiveAmount)](dexBlue.sol#L2407)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\tExternal calls sending eth:\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\tState variables written after the call(s):\n\t- [balances[trades[i].giveToken][reserve] -= trades[i].giveAmount - trades[i].rebate](dexBlue.sol#L2449)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.sellToken][order.signee] -= trades[i].giveAmount - trades[i].rebate](dexBlue.sol#L2511)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[trades[prev].giveToken][order.signee] += trades[prev].giveAmount - trades[i].fee](dexBlue.sol#L2517)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[trades[prev].giveToken][feeCollector] += trades[i].fee - trades[prev].rebate](dexBlue.sol#L2541)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [matched[order.hash] += trades[i].giveAmount - trades[i].rebate](dexBlue.sol#L2523)\n\t[dexBlueStorage.matched](dexBlue.sol#L165) can be used in cross function reentrancies:\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n",
                "first_markdown_element": "dexBlue.sol#L2303-L2611",
                "id": "65eb1c2d8efc2871f3d8be1e8189d73a3ed10fa2119579b1abcaf973b94d8500",
                "check": "reentrancy-eth",
                "impact": "High",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (dexBlue.sol#3851-3867)\n\t- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (dexBlue.sol#3877)\n\t- Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee) (dexBlue.sol#3939)\n\t- dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) (dexBlue.sol#3955-3965)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\tExternal calls sending eth:\n\t- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (dexBlue.sol#3929-3935)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\tState variables written after the call(s):\n\t- balances[trade.makerToken][feeCollector] += trade.takerFee (dexBlue.sol#3971)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (dexBlue.sol#3423-3439)\n\t- dexBlue.depositEther() (dexBlue.sol#2911-2917)\n\t- dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009)\n\t- dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981)\n\t- dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245)\n\t- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989)\n\t- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175)\n\t- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (dexBlue.sol#4193-4271)\n\t- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (dexBlue.sol#4291-4373)\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519)\n\t- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135)\n\t- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3157-3211)\n\t- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405)\n\t- balances[trade.takerToken][feeCollector] += trade.makerFee (dexBlue.sol#3973)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (dexBlue.sol#3423-3439)\n\t- dexBlue.depositEther() (dexBlue.sol#2911-2917)\n\t- dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009)\n\t- dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981)\n\t- dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245)\n\t- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989)\n\t- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175)\n\t- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (dexBlue.sol#4193-4271)\n\t- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (dexBlue.sol#4291-4373)\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519)\n\t- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135)\n\t- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3157-3211)\n\t- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount)](dexBlue.sol#L3851-L3867)\n\t- [Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee)](dexBlue.sol#L3877)\n\t- [Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee)](dexBlue.sol#L3939)\n\t- [dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee)](dexBlue.sol#L3955-L3965)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\tExternal calls sending eth:\n\t- [require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.)](dexBlue.sol#L3929-L3935)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\tState variables written after the call(s):\n\t- [balances[trade.makerToken][feeCollector] += trade.takerFee](dexBlue.sol#L3971)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlue.blockFundsForSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3423-L3439)\n\t- [dexBlue.depositEther()](dexBlue.sol#L2911-L2917)\n\t- [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009)\n\t- [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981)\n\t- [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245)\n\t- [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989)\n\t- [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175)\n\t- [dexBlue.executeReserveTrade(address,uint256,address,uint256,address)](dexBlue.sol#L4193-L4271)\n\t- [dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[])](dexBlue.sol#L4291-L4373)\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519)\n\t- [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135)\n\t- [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3157-L3211)\n\t- [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405)\n\t- [balances[trade.takerToken][feeCollector] += trade.makerFee](dexBlue.sol#L3973)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlue.blockFundsForSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3423-L3439)\n\t- [dexBlue.depositEther()](dexBlue.sol#L2911-L2917)\n\t- [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009)\n\t- [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981)\n\t- [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245)\n\t- [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989)\n\t- [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175)\n\t- [dexBlue.executeReserveTrade(address,uint256,address,uint256,address)](dexBlue.sol#L4193-L4271)\n\t- [dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[])](dexBlue.sol#L4291-L4373)\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519)\n\t- [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135)\n\t- [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3157-L3211)\n\t- [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405)\n",
                "first_markdown_element": "dexBlue.sol#L3831-L3989",
                "id": "a0a4a0e2a89dd3a8b272b7be6dc7cf670595de1332216edb89866025afc06091",
                "check": "reentrancy-eth",
                "impact": "High",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (dexBlue.sol#4033-4051)\n\t- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (dexBlue.sol#4061)\n\t- Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee) (dexBlue.sol#4125)\n\t- dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) (dexBlue.sol#4141-4151)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\tExternal calls sending eth:\n\t- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (dexBlue.sol#4115-4121)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\tState variables written after the call(s):\n\t- balances[trade.makerToken][feeCollector] += trade.takerFee (dexBlue.sol#4157)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (dexBlue.sol#3423-3439)\n\t- dexBlue.depositEther() (dexBlue.sol#2911-2917)\n\t- dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009)\n\t- dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981)\n\t- dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245)\n\t- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989)\n\t- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175)\n\t- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (dexBlue.sol#4193-4271)\n\t- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (dexBlue.sol#4291-4373)\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519)\n\t- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135)\n\t- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3157-3211)\n\t- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405)\n\t- balances[trade.takerToken][feeCollector] += trade.makerFee (dexBlue.sol#4159)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (dexBlue.sol#3423-3439)\n\t- dexBlue.depositEther() (dexBlue.sol#2911-2917)\n\t- dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009)\n\t- dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981)\n\t- dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245)\n\t- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989)\n\t- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175)\n\t- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (dexBlue.sol#4193-4271)\n\t- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (dexBlue.sol#4291-4373)\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519)\n\t- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135)\n\t- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3157-3211)\n\t- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount)](dexBlue.sol#L4033-L4051)\n\t- [Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee)](dexBlue.sol#L4061)\n\t- [Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee)](dexBlue.sol#L4125)\n\t- [dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee)](dexBlue.sol#L4141-L4151)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\tExternal calls sending eth:\n\t- [require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.)](dexBlue.sol#L4115-L4121)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\tState variables written after the call(s):\n\t- [balances[trade.makerToken][feeCollector] += trade.takerFee](dexBlue.sol#L4157)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlue.blockFundsForSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3423-L3439)\n\t- [dexBlue.depositEther()](dexBlue.sol#L2911-L2917)\n\t- [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009)\n\t- [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981)\n\t- [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245)\n\t- [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989)\n\t- [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175)\n\t- [dexBlue.executeReserveTrade(address,uint256,address,uint256,address)](dexBlue.sol#L4193-L4271)\n\t- [dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[])](dexBlue.sol#L4291-L4373)\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519)\n\t- [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135)\n\t- [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3157-L3211)\n\t- [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405)\n\t- [balances[trade.takerToken][feeCollector] += trade.makerFee](dexBlue.sol#L4159)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlue.blockFundsForSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3423-L3439)\n\t- [dexBlue.depositEther()](dexBlue.sol#L2911-L2917)\n\t- [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009)\n\t- [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981)\n\t- [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245)\n\t- [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989)\n\t- [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175)\n\t- [dexBlue.executeReserveTrade(address,uint256,address,uint256,address)](dexBlue.sol#L4193-L4271)\n\t- [dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[])](dexBlue.sol#L4291-L4373)\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519)\n\t- [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135)\n\t- [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3157-L3211)\n\t- [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405)\n",
                "first_markdown_element": "dexBlue.sol#L4009-L4175",
                "id": "ab4c44f6c9efaadba64f298e0bbf2ee7c9955118efe970fa2d6907510d24f146",
                "check": "reentrancy-eth",
                "impact": "High",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStorage.public_reserves (dexBlue.sol#185) is never initialized. It is used in:\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n",
                "markdown": "[dexBlueStorage.public_reserves](dexBlue.sol#L185) is never initialized. It is used in:\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n",
                "first_markdown_element": "dexBlue.sol#L185",
                "id": "31caf92d13deac16ce85ab96acb1a0894475d706f5f2ae5b597f43d8e87ffe92",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.reserve_indices (dexBlue.sol#183) is never initialized. It is used in:\n\t- dexBlueUtils.getReserveIndex(address) (dexBlue.sol#281-285)\n",
                "markdown": "[dexBlueStorage.reserve_indices](dexBlue.sol#L183) is never initialized. It is used in:\n\t- [dexBlueUtils.getReserveIndex(address)](dexBlue.sol#L281-L285)\n",
                "first_markdown_element": "dexBlue.sol#L183",
                "id": "3ffafeeb09aa9b706bf0811180583f66db8df0ba67c5f2733df23291ec244409",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.tokens (dexBlue.sol#173) is never initialized. It is used in:\n\t- dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (dexBlue.sol#507-627)\n\t- dexBlueStructs.reserveReserveTradeFromInput(dexBlueStructs.TradeInputPacked) (dexBlue.sol#857-877)\n\t- dexBlueStructs.ringTradeFromInput(dexBlueStructs.RingTradeInputPacked) (dexBlue.sol#951-971)\n\t- dexBlueUtils.getTokenFromIndex(uint256) (dexBlue.sol#251-255)\n",
                "markdown": "[dexBlueStorage.tokens](dexBlue.sol#L173) is never initialized. It is used in:\n\t- [dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked)](dexBlue.sol#L507-L627)\n\t- [dexBlueStructs.reserveReserveTradeFromInput(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L857-L877)\n\t- [dexBlueStructs.ringTradeFromInput(dexBlueStructs.RingTradeInputPacked)](dexBlue.sol#L951-L971)\n\t- [dexBlueUtils.getTokenFromIndex(uint256)](dexBlue.sol#L251-L255)\n",
                "first_markdown_element": "dexBlue.sol#L173",
                "id": "426f9928cb10590463cd63cd4fb557fd7a40b6f971698f57f5b67d5da9223798",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.token_arr (dexBlue.sol#177) is never initialized. It is used in:\n\t- dexBlueUtils.getTokens() (dexBlue.sol#265-269)\n",
                "markdown": "[dexBlueStorage.token_arr](dexBlue.sol#L177) is never initialized. It is used in:\n\t- [dexBlueUtils.getTokens()](dexBlue.sol#L265-L269)\n",
                "first_markdown_element": "dexBlue.sol#L177",
                "id": "51849c0a2e5d9adaf3a03cede5434d1c74c9d5cbd19ae754dbbcc7526fe3487f",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.reserves (dexBlue.sol#181) is never initialized. It is used in:\n\t- dexBlueUtils.getReserveFromIndex(uint256) (dexBlue.sol#297-301)\n\t- dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765)\n\t- dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#1811-1843)\n\t- dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (dexBlue.sol#1857-1899)\n\t- dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (dexBlue.sol#1909-1933)\n\t- dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (dexBlue.sol#1947-1979)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n",
                "markdown": "[dexBlueStorage.reserves](dexBlue.sol#L181) is never initialized. It is used in:\n\t- [dexBlueUtils.getReserveFromIndex(uint256)](dexBlue.sol#L297-L301)\n\t- [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765)\n\t- [dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1811-L1843)\n\t- [dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[])](dexBlue.sol#L1857-L1899)\n\t- [dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1909-L1933)\n\t- [dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[])](dexBlue.sol#L1947-L1979)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n",
                "first_markdown_element": "dexBlue.sol#L181",
                "id": "6006278c67dbfb3679d05d9e5da12b576d4d137ed20dfdca25a7aeac8f7b6d45",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.feeCollector (dexBlue.sol#197) is never initialized. It is used in:\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n",
                "markdown": "[dexBlueStorage.feeCollector](dexBlue.sol#L197) is never initialized. It is used in:\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n",
                "first_markdown_element": "dexBlue.sol#L197",
                "id": "83c89bdaddbaf5135487fe479399613cf3acf98a74427dfb07a35eac9710eb5f",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.public_reserve_arr (dexBlue.sol#187) is never initialized. It is used in:\n\t- dexBlueUtils.getReserves() (dexBlue.sol#311-315)\n\t- dexBlueSettlementModule.getBestReserve(address,uint256,address) (dexBlue.sol#2655-2683)\n",
                "markdown": "[dexBlueStorage.public_reserve_arr](dexBlue.sol#L187) is never initialized. It is used in:\n\t- [dexBlueUtils.getReserves()](dexBlue.sol#L311-L315)\n\t- [dexBlueSettlementModule.getBestReserve(address,uint256,address)](dexBlue.sol#L2655-L2683)\n",
                "first_markdown_element": "dexBlue.sol#L187",
                "id": "9ee9127f2814cea558e713e1467abf0dcefe41ef86f54f82b3ad488a2dc24767",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.last_blocked_timestamp (dexBlue.sol#159) is never initialized. It is used in:\n\t- dexBlueUtils.getLastBlockedTimestamp(address) (dexBlue.sol#345-349)\n",
                "markdown": "[dexBlueStorage.last_blocked_timestamp](dexBlue.sol#L159) is never initialized. It is used in:\n\t- [dexBlueUtils.getLastBlockedTimestamp(address)](dexBlue.sol#L345-L349)\n",
                "first_markdown_element": "dexBlue.sol#L159",
                "id": "bd7e159be2940aa0c8e874086f9fab7ab2a18b958a27211a88d08c861fe0572c",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.arbiters (dexBlue.sol#193) is never initialized. It is used in:\n\t- dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765)\n\t- dexBlueSettlementModule.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#1779-1799)\n\t- dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#1811-1843)\n\t- dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (dexBlue.sol#1857-1899)\n\t- dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (dexBlue.sol#1909-1933)\n\t- dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (dexBlue.sol#1947-1979)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n",
                "markdown": "[dexBlueStorage.arbiters](dexBlue.sol#L193) is never initialized. It is used in:\n\t- [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765)\n\t- [dexBlueSettlementModule.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1779-L1799)\n\t- [dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1811-L1843)\n\t- [dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[])](dexBlue.sol#L1857-L1899)\n\t- [dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1909-L1933)\n\t- [dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[])](dexBlue.sol#L1947-L1979)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n",
                "first_markdown_element": "dexBlue.sol#L193",
                "id": "c2662c4660686ea8b83ffb40b65ae59dcc844333da447a8a5c0e84a92119b42b",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStructs.EIP712_DOMAIN_SEPARATOR (dexBlue.sol#415) is never initialized. It is used in:\n\t- dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (dexBlue.sol#507-627)\n",
                "markdown": "[dexBlueStructs.EIP712_DOMAIN_SEPARATOR](dexBlue.sol#L415) is never initialized. It is used in:\n\t- [dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked)](dexBlue.sol#L507-L627)\n",
                "first_markdown_element": "dexBlue.sol#L415",
                "id": "ee60c31f9e562c915909ddf6e808373f4b51d67091b8f4f2e2e921803589345d",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.token_indices (dexBlue.sol#175) is never initialized. It is used in:\n\t- dexBlueUtils.getTokenIndex(address) (dexBlue.sol#235-239)\n",
                "markdown": "[dexBlueStorage.token_indices](dexBlue.sol#L175) is never initialized. It is used in:\n\t- [dexBlueUtils.getTokenIndex(address)](dexBlue.sol#L235-L239)\n",
                "first_markdown_element": "dexBlue.sol#L175",
                "id": "f537b7a07d155261a8249fbf129425cbb86e83eed591e9a6c3b605babfdaa1db",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.delegates (dexBlue.sol#169) is never initialized. It is used in:\n\t- dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (dexBlue.sol#507-627)\n",
                "markdown": "[dexBlueStorage.delegates](dexBlue.sol#L169) is never initialized. It is used in:\n\t- [dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked)](dexBlue.sol#L507-L627)\n",
                "first_markdown_element": "dexBlue.sol#L169",
                "id": "fc677b603f0d87aafea0a0e4bf344ca0472f7f993aedd52747f01a1377379bea",
                "check": "uninitialized-state",
                "impact": "High",
                "confidence": "High"
            },
            {
                "description": "WETH (dexBlue.sol#5399-5406) has incorrect ERC20 function interface:Token.transfer(address,uint256) (dexBlue.sol#5337)\n",
                "markdown": "[WETH](dexBlue.sol#L5399-L5406) has incorrect ERC20 function interface:[Token.transfer(address,uint256)](dexBlue.sol#L5337)\n",
                "first_markdown_element": "dexBlue.sol#L5399-L5406",
                "id": "108a550a281bcb22c80d01ed00193c9b18094720a81bacb9d295c09b86562f52",
                "check": "erc20-interface",
                "impact": "Medium",
                "confidence": "High"
            },
            {
                "description": "WETH (dexBlue.sol#5399-5406) has incorrect ERC20 function interface:Token.transferFrom(address,address,uint256) (dexBlue.sol#5353)\n",
                "markdown": "[WETH](dexBlue.sol#L5399-L5406) has incorrect ERC20 function interface:[Token.transferFrom(address,address,uint256)](dexBlue.sol#L5353)\n",
                "first_markdown_element": "dexBlue.sol#L5399-L5406",
                "id": "89ef5d58f00f27d0cdbfb8523c33f3048f0e03f16c5287dfa49bff0da7fd12ca",
                "check": "erc20-interface",
                "impact": "Medium",
                "confidence": "High"
            },
            {
                "description": "dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981) uses a dangerous strict equality:\n\t- require(bool)(balanceBefore + amount == address(this).balance) (dexBlue.sol#2971)\n",
                "markdown": "[dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981) uses a dangerous strict equality:\n\t- [require(bool)(balanceBefore + amount == address(this).balance)](dexBlue.sol#L2971)\n",
                "first_markdown_element": "dexBlue.sol#L2945-L2981",
                "id": "2a6961ab851f17da1b992282c6818824e949840452fe1f91858e4dd0f23b2f90",
                "check": "incorrect-equality",
                "impact": "Medium",
                "confidence": "High"
            },
            {
                "description": "Contract locking ether found:\n\tContract WETH (dexBlue.sol#5399-5406) has payable functions:\n\t - WETH.deposit() (dexBlue.sol#5401)\n\tBut does not have a function to withdraw the ether\n",
                "markdown": "Contract locking ether found:\n\tContract [WETH](dexBlue.sol#L5399-L5406) has payable functions:\n\t - [WETH.deposit()](dexBlue.sol#L5401)\n\tBut does not have a function to withdraw the ether\n",
                "first_markdown_element": "dexBlue.sol#L5399-L5406",
                "id": "3c6f0bed45e84779d0006c407c559760ae80dffc9694dcd9de3d7b6c8426907d",
                "check": "locked-ether",
                "impact": "Medium",
                "confidence": "High"
            },
            {
                "description": "Contract locking ether found:\n\tContract dexBlueReserve (dexBlue.sol#5253-5295) has payable functions:\n\t - dexBlueReserve.trade(address,uint256,address,uint256) (dexBlue.sol#5257)\n\t - dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]) (dexBlue.sol#5263)\n\t - dexBlueReserve.swap(address,uint256,address,uint256) (dexBlue.sol#5287)\n\tBut does not have a function to withdraw the ether\n",
                "markdown": "Contract locking ether found:\n\tContract [dexBlueReserve](dexBlue.sol#L5253-L5295) has payable functions:\n\t - [dexBlueReserve.trade(address,uint256,address,uint256)](dexBlue.sol#L5257)\n\t - [dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[])](dexBlue.sol#L5263)\n\t - [dexBlueReserve.swap(address,uint256,address,uint256)](dexBlue.sol#L5287)\n\tBut does not have a function to withdraw the ether\n",
                "first_markdown_element": "dexBlue.sol#L5253-L5295",
                "id": "a952ac262d425c0be34624b8cde4f7c3fd35f1d6d3d3318a47e508705599a1c8",
                "check": "locked-ether",
                "impact": "Medium",
                "confidence": "High"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765):\n\tExternal calls:\n\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1747-1755)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (dexBlue.sol#1541-1563)\n\tState variables written after the call(s):\n\t- ! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i])) (dexBlue.sol#1699-1707)\n\t\t- balances[makerOrder.sellToken][makerOrder.signee] -= trade.makerAmount - trade.makerRebate (dexBlue.sol#1081)\n\t\t- balances[takerOrder.sellToken][takerOrder.signee] -= trade.takerAmount (dexBlue.sol#1083)\n\t\t- balances[makerOrder.buyToken][makerOrder.signee] += trade.takerAmount - trade.makerFee (dexBlue.sol#1089)\n\t\t- balances[takerOrder.buyToken][takerOrder.signee] += trade.makerAmount - trade.takerFee (dexBlue.sol#1091)\n\t\t- balances[takerOrder.buyToken][feeCollector] += trade.takerFee - trade.makerRebate (dexBlue.sol#1105)\n\t\t- balances[makerOrder.buyToken][feeCollector] += trade.makerFee (dexBlue.sol#1107)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t\t- balances[order.sellToken][order.signee] -= trade.orderAmount - trade.orderRebate (dexBlue.sol#1211)\n\t\t- balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate (dexBlue.sol#1257)\n\t\t- balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee (dexBlue.sol#1263)\n\t\t- balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate (dexBlue.sol#1275)\n\t\t- balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate (dexBlue.sol#1277)\n\t\t- balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate (dexBlue.sol#1305)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t\t- balances[order.sellToken][order.signee] -= trade.orderAmount - trade.orderRebate (dexBlue.sol#1211)\n\t\t- balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate (dexBlue.sol#1257)\n\t\t- balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee (dexBlue.sol#1263)\n\t\t- balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate (dexBlue.sol#1275)\n\t\t- balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate (dexBlue.sol#1277)\n\t\t- balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate (dexBlue.sol#1305)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- ! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i])) (dexBlue.sol#1699-1707)\n\t\t- matched[makerOrder.hash] += trade.makerAmount - trade.makerRebate (dexBlue.sol#1097)\n\t\t- matched[takerOrder.hash] += trade.takerAmount (dexBlue.sol#1099)\n\tdexBlueStorage.matched (dexBlue.sol#165) can be used in cross function reentrancies:\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t\t- matched[order.hash] += trade.orderAmount - trade.orderRebate (dexBlue.sol#1269)\n\tdexBlueStorage.matched (dexBlue.sol#165) can be used in cross function reentrancies:\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t\t- matched[order.hash] += trade.orderAmount - trade.orderRebate (dexBlue.sol#1269)\n\tdexBlueStorage.matched (dexBlue.sol#165) can be used in cross function reentrancies:\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765):\n\tExternal calls:\n\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1747-L1755)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade)))](dexBlue.sol#L1541-L1563)\n\tState variables written after the call(s):\n\t- [! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i]))](dexBlue.sol#L1699-L1707)\n\t\t- [balances[makerOrder.sellToken][makerOrder.signee] -= trade.makerAmount - trade.makerRebate](dexBlue.sol#L1081)\n\t\t- [balances[takerOrder.sellToken][takerOrder.signee] -= trade.takerAmount](dexBlue.sol#L1083)\n\t\t- [balances[makerOrder.buyToken][makerOrder.signee] += trade.takerAmount - trade.makerFee](dexBlue.sol#L1089)\n\t\t- [balances[takerOrder.buyToken][takerOrder.signee] += trade.makerAmount - trade.takerFee](dexBlue.sol#L1091)\n\t\t- [balances[takerOrder.buyToken][feeCollector] += trade.takerFee - trade.makerRebate](dexBlue.sol#L1105)\n\t\t- [balances[makerOrder.buyToken][feeCollector] += trade.makerFee](dexBlue.sol#L1107)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t\t- [balances[order.sellToken][order.signee] -= trade.orderAmount - trade.orderRebate](dexBlue.sol#L1211)\n\t\t- [balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate](dexBlue.sol#L1257)\n\t\t- [balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee](dexBlue.sol#L1263)\n\t\t- [balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate](dexBlue.sol#L1275)\n\t\t- [balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate](dexBlue.sol#L1277)\n\t\t- [balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate](dexBlue.sol#L1305)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t\t- [balances[order.sellToken][order.signee] -= trade.orderAmount - trade.orderRebate](dexBlue.sol#L1211)\n\t\t- [balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate](dexBlue.sol#L1257)\n\t\t- [balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee](dexBlue.sol#L1263)\n\t\t- [balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate](dexBlue.sol#L1275)\n\t\t- [balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate](dexBlue.sol#L1277)\n\t\t- [balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate](dexBlue.sol#L1305)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i]))](dexBlue.sol#L1699-L1707)\n\t\t- [matched[makerOrder.hash] += trade.makerAmount - trade.makerRebate](dexBlue.sol#L1097)\n\t\t- [matched[takerOrder.hash] += trade.takerAmount](dexBlue.sol#L1099)\n\t[dexBlueStorage.matched](dexBlue.sol#L165) can be used in cross function reentrancies:\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t\t- [matched[order.hash] += trade.orderAmount - trade.orderRebate](dexBlue.sol#L1269)\n\t[dexBlueStorage.matched](dexBlue.sol#L165) can be used in cross function reentrancies:\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t\t- [matched[order.hash] += trade.orderAmount - trade.orderRebate](dexBlue.sol#L1269)\n\t[dexBlueStorage.matched](dexBlue.sol#L165) can be used in cross function reentrancies:\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n",
                "first_markdown_element": "dexBlue.sol#L1663-L1765",
                "id": "1c6710ac981a5f8cbe360ffd8ec19d3cca6e4c2125a16aab2ad34e5a9d26e5d5",
                "check": "reentrancy-no-eth",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.spendGasTokens(uint256) (dexBlue.sol#4639-4663):\n\tExternal calls:\n\t- restoreChildContractAddress(i).call() (dexBlue.sol#4653)\n\tState variables written after the call(s):\n\t- gas_token_nonce_tail = tail + amount (dexBlue.sol#4659)\n\tdexBlue.gas_token_nonce_tail (dexBlue.sol#4595) can be used in cross function reentrancies:\n\t- dexBlue.getAvailableGasTokens() (dexBlue.sol#4605-4609)\n\t- dexBlue.spendGasTokens(uint256) (dexBlue.sol#4639-4663)\n",
                "markdown": "Reentrancy in [dexBlue.spendGasTokens(uint256)](dexBlue.sol#L4639-L4663):\n\tExternal calls:\n\t- [restoreChildContractAddress(i).call()](dexBlue.sol#L4653)\n\tState variables written after the call(s):\n\t- [gas_token_nonce_tail = tail + amount](dexBlue.sol#L4659)\n\t[dexBlue.gas_token_nonce_tail](dexBlue.sol#L4595) can be used in cross function reentrancies:\n\t- [dexBlue.getAvailableGasTokens()](dexBlue.sol#L4605-L4609)\n\t- [dexBlue.spendGasTokens(uint256)](dexBlue.sol#L4639-L4663)\n",
                "first_markdown_element": "dexBlue.sol#L4639-L4663",
                "id": "24be91451891c94ef62ff891692bc407d0f8c0802ef7df504b4364d90235d172",
                "check": "reentrancy-no-eth",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (dexBlue.sol#3851-3867)\n\tState variables written after the call(s):\n\t- balances[trade.takerToken][takerReserve] -= trade.takerAmount (dexBlue.sol#3871)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (dexBlue.sol#3423-3439)\n\t- dexBlue.depositEther() (dexBlue.sol#2911-2917)\n\t- dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009)\n\t- dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981)\n\t- dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245)\n\t- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989)\n\t- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175)\n\t- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (dexBlue.sol#4193-4271)\n\t- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (dexBlue.sol#4291-4373)\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519)\n\t- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135)\n\t- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3157-3211)\n\t- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount)](dexBlue.sol#L3851-L3867)\n\tState variables written after the call(s):\n\t- [balances[trade.takerToken][takerReserve] -= trade.takerAmount](dexBlue.sol#L3871)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlue.blockFundsForSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3423-L3439)\n\t- [dexBlue.depositEther()](dexBlue.sol#L2911-L2917)\n\t- [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009)\n\t- [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981)\n\t- [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245)\n\t- [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989)\n\t- [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175)\n\t- [dexBlue.executeReserveTrade(address,uint256,address,uint256,address)](dexBlue.sol#L4193-L4271)\n\t- [dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[])](dexBlue.sol#L4291-L4373)\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519)\n\t- [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135)\n\t- [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3157-L3211)\n\t- [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405)\n",
                "first_markdown_element": "dexBlue.sol#L3831-L3989",
                "id": "2a3ab030aa5c5dd689d65fff9a77e6391cb2889f90cf20d97b6c178baf972a02",
                "check": "reentrancy-no-eth",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319):\n\tExternal calls:\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\tState variables written after the call(s):\n\t- balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate (dexBlue.sol#1257)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee (dexBlue.sol#1263)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate (dexBlue.sol#1275)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate (dexBlue.sol#1277)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate (dexBlue.sol#1305)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- matched[order.hash] += trade.orderAmount - trade.orderRebate (dexBlue.sol#1269)\n\tdexBlueStorage.matched (dexBlue.sol#165) can be used in cross function reentrancies:\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319):\n\tExternal calls:\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\tState variables written after the call(s):\n\t- [balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate](dexBlue.sol#L1257)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee](dexBlue.sol#L1263)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate](dexBlue.sol#L1275)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate](dexBlue.sol#L1277)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate](dexBlue.sol#L1305)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [matched[order.hash] += trade.orderAmount - trade.orderRebate](dexBlue.sol#L1269)\n\t[dexBlueStorage.matched](dexBlue.sol#L165) can be used in cross function reentrancies:\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n",
                "first_markdown_element": "dexBlue.sol#L1147-L1319",
                "id": "5b62a0dfd189eaeb13c99c333f3ce1d4608e1f99eb52fa5934e38e72d2f61ed0",
                "check": "reentrancy-no-eth",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (dexBlue.sol#4033-4051)\n\tState variables written after the call(s):\n\t- balances[trade.takerToken][takerReserve] -= trade.takerAmount (dexBlue.sol#4055)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (dexBlue.sol#3423-3439)\n\t- dexBlue.depositEther() (dexBlue.sol#2911-2917)\n\t- dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009)\n\t- dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981)\n\t- dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245)\n\t- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989)\n\t- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175)\n\t- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (dexBlue.sol#4193-4271)\n\t- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (dexBlue.sol#4291-4373)\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519)\n\t- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135)\n\t- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3157-3211)\n\t- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount)](dexBlue.sol#L4033-L4051)\n\tState variables written after the call(s):\n\t- [balances[trade.takerToken][takerReserve] -= trade.takerAmount](dexBlue.sol#L4055)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlue.blockFundsForSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3423-L3439)\n\t- [dexBlue.depositEther()](dexBlue.sol#L2911-L2917)\n\t- [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009)\n\t- [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981)\n\t- [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245)\n\t- [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989)\n\t- [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175)\n\t- [dexBlue.executeReserveTrade(address,uint256,address,uint256,address)](dexBlue.sol#L4193-L4271)\n\t- [dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[])](dexBlue.sol#L4291-L4373)\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519)\n\t- [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135)\n\t- [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3157-L3211)\n\t- [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405)\n",
                "first_markdown_element": "dexBlue.sol#L4009-L4175",
                "id": "6d41278618cc13cc796c06a25dff6e61ef78ead4599083a39ce40be4137b1f19",
                "check": "reentrancy-no-eth",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513):\n\tExternal calls:\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (dexBlue.sol#1407-1435)\n\tState variables written after the call(s):\n\t- balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate (dexBlue.sol#1451)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee (dexBlue.sol#1457)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate (dexBlue.sol#1469)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate (dexBlue.sol#1471)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate (dexBlue.sol#1499)\n\tdexBlueStorage.balances (dexBlue.sol#155) can be used in cross function reentrancies:\n\t- dexBlueUtils.getBalance(address,address) (dexBlue.sol#219-223)\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n\t- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889)\n\t- matched[order.hash] += trade.orderAmount - trade.orderRebate (dexBlue.sol#1463)\n\tdexBlueStorage.matched (dexBlue.sol#165) can be used in cross function reentrancies:\n\t- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319)\n\t- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513)\n\t- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131)\n\t- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287)\n\t- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513):\n\tExternal calls:\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data)))](dexBlue.sol#L1407-L1435)\n\tState variables written after the call(s):\n\t- [balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate](dexBlue.sol#L1451)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee](dexBlue.sol#L1457)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate](dexBlue.sol#L1469)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate](dexBlue.sol#L1471)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate](dexBlue.sol#L1499)\n\t[dexBlueStorage.balances](dexBlue.sol#L155) can be used in cross function reentrancies:\n\t- [dexBlueUtils.getBalance(address,address)](dexBlue.sol#L219-L223)\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n\t- [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889)\n\t- [matched[order.hash] += trade.orderAmount - trade.orderRebate](dexBlue.sol#L1463)\n\t[dexBlueStorage.matched](dexBlue.sol#L165) can be used in cross function reentrancies:\n\t- [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319)\n\t- [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513)\n\t- [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131)\n\t- [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287)\n\t- [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611)\n",
                "first_markdown_element": "dexBlue.sol#L1337-L1513",
                "id": "7b84d1ee4775484faed1f150c8bbc25e81fcce46d7d01ae6ec83a30414242dd7",
                "check": "reentrancy-no-eth",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (dexBlue.sol#3627-3645) ignores return value by settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3633)\n",
                "markdown": "[dexBlue.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L3627-L3645) ignores return value by [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3633)\n",
                "first_markdown_element": "dexBlue.sol#L3627-L3645",
                "id": "23a7e008b8f06bcca7e9b5ceb81cfc1cafd3899a5393e622fd6bf316dec1a602",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#3781-3813) ignores return value by settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3787)\n",
                "markdown": "[dexBlue.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L3781-L3813) ignores return value by [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3787)\n",
                "first_markdown_element": "dexBlue.sol#L3781-L3813",
                "id": "488913903595654f374e6997ae0df047ebdd266db3cc79834335da04e2010acf",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#3691-3723) ignores return value by settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3697)\n",
                "markdown": "[dexBlue.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L3691-L3723) ignores return value by [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3697)\n",
                "first_markdown_element": "dexBlue.sol#L3691-L3723",
                "id": "4b959bbaf4ce8693da63d7fb01725ab9bec32bfca1c9e51f61d3ad4d87fac081",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#3537-3555) ignores return value by settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3543)\n",
                "markdown": "[dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L3537-L3555) ignores return value by [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3543)\n",
                "first_markdown_element": "dexBlue.sol#L3537-L3555",
                "id": "50bbdfb19852c815b7d09fb26fd4375977f3d690557a8636067071b806d385f9",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#3567-3585) ignores return value by settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3573)\n",
                "markdown": "[dexBlue.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L3567-L3585) ignores return value by [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3573)\n",
                "first_markdown_element": "dexBlue.sol#L3567-L3585",
                "id": "6cc1e24fe796d2ccc8c7ca81c2c59be297c998dde62c21c96508a640bf875186",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (dexBlue.sol#3599-3617) ignores return value by settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3605)\n",
                "markdown": "[dexBlue.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[])](dexBlue.sol#L3599-L3617) ignores return value by [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3605)\n",
                "first_markdown_element": "dexBlue.sol#L3599-L3617",
                "id": "c024aee69cb9b9913b1b91a61b3fe38eaa103ed696589ee9a2f3842aa7023b66",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.spendGasTokens(uint256) (dexBlue.sol#4639-4663) ignores return value by restoreChildContractAddress(i).call() (dexBlue.sol#4653)\n",
                "markdown": "[dexBlue.spendGasTokens(uint256)](dexBlue.sol#L4639-L4663) ignores return value by [restoreChildContractAddress(i).call()](dexBlue.sol#L4653)\n",
                "first_markdown_element": "dexBlue.sol#L4639-L4663",
                "id": "df9a08dc10c367cdade808fca5a70da0160b59c20eeeb0323d977c7113553acc",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (dexBlue.sol#3659-3677) ignores return value by settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3665)\n",
                "markdown": "[dexBlue.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[])](dexBlue.sol#L3659-L3677) ignores return value by [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3665)\n",
                "first_markdown_element": "dexBlue.sol#L3659-L3677",
                "id": "f58046d08feafbbc2aba8ad447a95038111939f44830157c2a788bc26461fabe",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#3735-3767) ignores return value by settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3741)\n",
                "markdown": "[dexBlue.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L3735-L3767) ignores return value by [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3741)\n",
                "first_markdown_element": "dexBlue.sol#L3735-L3767",
                "id": "f58d2118af51bdee73e2cc0b5a22bee0972eeb3b89b83c5b010ea0c303404a33",
                "check": "unchecked-lowlevel",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.getBestReserve(address,uint256,address).bestReserve (dexBlue.sol#2657) is a local variable never initialized\n",
                "markdown": "[dexBlueSettlementModule.getBestReserve(address,uint256,address).bestReserve](dexBlue.sol#L2657) is a local variable never initialized\n",
                "first_markdown_element": "dexBlue.sol#L2657",
                "id": "5de2e56e990a08137c582670cb6c44b911eafa29c890eddf07fc635d21f6c2ff",
                "check": "uninitialized-local",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.getBestReserve(address,uint256,address).bestReserve (dexBlue.sol#4419) is a local variable never initialized\n",
                "markdown": "[dexBlue.getBestReserve(address,uint256,address).bestReserve](dexBlue.sol#L4419) is a local variable never initialized\n",
                "first_markdown_element": "dexBlue.sol#L4419",
                "id": "bf24b038775f454a22e10e16e585be4d7dee5d8f476c91d74bd28a2ea069ef72",
                "check": "uninitialized-local",
                "impact": "Medium",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.changeSingleSigWaitingPeriod(uint256) (dexBlue.sol#4933-4947) should emit an event for: \n\t- single_sig_waiting_period = waiting_period (dexBlue.sol#4945) \n",
                "markdown": "[dexBlue.changeSingleSigWaitingPeriod(uint256)](dexBlue.sol#L4933-L4947) should emit an event for: \n\t- [single_sig_waiting_period = waiting_period](dexBlue.sol#L4945) \n",
                "first_markdown_element": "dexBlue.sol#L4933-L4947",
                "id": "8bb1d1c66ccb9c9ec80d88721b64b870c7f27c2bfbbc5c93ccfae94b82083853",
                "check": "events-maths",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.nominateFeeCollector(address).collector (dexBlue.sol#5143) lacks a zero-check on :\n\t\t- feeCollector = collector (dexBlue.sol#5147)\n",
                "markdown": "[dexBlue.nominateFeeCollector(address).collector](dexBlue.sol#L5143) lacks a zero-check on :\n\t\t- [feeCollector = collector](dexBlue.sol#L5147)\n",
                "first_markdown_element": "dexBlue.sol#L5143",
                "id": "01e70424e3afa55bb22a4736425092c55de1116610d3fd3a9b9d06fcad8a186d",
                "check": "missing-zero-check",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.changeOwner(address).new_owner (dexBlue.sol#4957) lacks a zero-check on :\n\t\t- owner = new_owner (dexBlue.sol#4961)\n",
                "markdown": "[dexBlue.changeOwner(address).new_owner](dexBlue.sol#L4957) lacks a zero-check on :\n\t\t- [owner = new_owner](dexBlue.sol#L4961)\n",
                "first_markdown_element": "dexBlue.sol#L4957",
                "id": "e4013c0f77b844599d59519ef715c827221fcbe49eaedb025075cc2f9ea2d62d",
                "check": "missing-zero-check",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611) has external calls inside a loop: Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (dexBlue.sol#2407)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611) has external calls inside a loop: [Token(trades[prev].giveToken).transfer(reserve,receiveAmount)](dexBlue.sol#L2407)\n",
                "first_markdown_element": "dexBlue.sol#L2303-L2611",
                "id": "112457082677bbe42833c24b37e04f616b160b5a2526035aa6d0e2f3899cd2e6",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (dexBlue.sol#2059-2075)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287) has external calls inside a loop: [require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount)](dexBlue.sol#L2059-L2075)\n",
                "first_markdown_element": "dexBlue.sol#L1991-L2287",
                "id": "1ac62e5b25e9f3b9a11beaee7f8106fe83a7ef1e9655d8f0271c6c9d3560d3f1",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287) has external calls inside a loop: [require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n",
                "first_markdown_element": "dexBlue.sol#L1991-L2287",
                "id": "1ff47ef2445fc61833a4a19b6680f1091ce6b2c07b7665326bf1a37899084919",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287) has external calls inside a loop: [require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n",
                "first_markdown_element": "dexBlue.sol#L1991-L2287",
                "id": "213d6f23d9473e61215d2ebb2813ca678e206d3446b0f05c78111ef2aae63bd0",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (dexBlue.sol#2379-2397)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611) has external calls inside a loop: [require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount)](dexBlue.sol#L2379-L2397)\n",
                "first_markdown_element": "dexBlue.sol#L2303-L2611",
                "id": "2831a4ae744747d9d95bec154503cbdd3335e3ed8345772dde635b7e86b29a3e",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.getBestReserve(address,uint256,address) (dexBlue.sol#4417-4445) has external calls inside a loop: output = dexBlueReserve(public_reserve_arr[i]).getSwapOutput(sell_token,sell_amount,buy_token) (dexBlue.sol#4429)\n",
                "markdown": "[dexBlue.getBestReserve(address,uint256,address)](dexBlue.sol#L4417-L4445) has external calls inside a loop: [output = dexBlueReserve(public_reserve_arr[i]).getSwapOutput(sell_token,sell_amount,buy_token)](dexBlue.sol#L4429)\n",
                "first_markdown_element": "dexBlue.sol#L4417-L4445",
                "id": "2feca4bbd0f5553dc43c7dcd547d892da7ec8b6c86250f741979c24157cf38a7",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#1529-1575) has external calls inside a loop: (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (dexBlue.sol#1541-1563)\n",
                "markdown": "[dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L1529-L1575) has external calls inside a loop: [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade)))](dexBlue.sol#L1541-L1563)\n",
                "first_markdown_element": "dexBlue.sol#L1529-L1575",
                "id": "326fed7b8e068dced977120787696c591afc9f825baeaf724a459b3058a6084f",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.getBestReserve(address,uint256,address) (dexBlue.sol#2655-2683) has external calls inside a loop: output = dexBlueReserve(public_reserve_arr[i]).getSwapOutput(sell_token,sell_amount,buy_token) (dexBlue.sol#2667)\n",
                "markdown": "[dexBlueSettlementModule.getBestReserve(address,uint256,address)](dexBlue.sol#L2655-L2683) has external calls inside a loop: [output = dexBlueReserve(public_reserve_arr[i]).getSwapOutput(sell_token,sell_amount,buy_token)](dexBlue.sol#L2667)\n",
                "first_markdown_element": "dexBlue.sol#L2655-L2683",
                "id": "73edf348da5f99a9254a213b1846120c6ee37b84dda426799d929749f373d928",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611) has external calls inside a loop: [require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n",
                "first_markdown_element": "dexBlue.sol#L2303-L2611",
                "id": "b8bc65b53d7195996f538de5d91906aa4b6ea390fee5c39ee1c3e01f6f54cc00",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611) has external calls inside a loop: [require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n",
                "first_markdown_element": "dexBlue.sol#L2303-L2611",
                "id": "da010605a5f5f9d7f6870f768acdcc3f514d6f3ff251e42dfbe2efddd2721e10",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319) has external calls inside a loop: (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n",
                "markdown": "[dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319) has external calls inside a loop: [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n",
                "first_markdown_element": "dexBlue.sol#L1147-L1319",
                "id": "e2a3c460187c028e7c600b6d48eb3e4cce44845bfde9798d77affecbccb6a332",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287) has external calls inside a loop: Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (dexBlue.sol#2085)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287) has external calls inside a loop: [Token(trades[prev].giveToken).transfer(reserve,receiveAmount)](dexBlue.sol#L2085)\n",
                "first_markdown_element": "dexBlue.sol#L1991-L2287",
                "id": "fda030f828954477b94ac693933af4b18440b3fd4a3fa71d30a95d5240cd4d15",
                "check": "calls-loop",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981):\n\tExternal calls:\n\t- Token(wrappedEtherContract).transferFrom(msg.sender,address(this),amount) (dexBlue.sol#2949)\n\t- WETH(wrappedEtherContract).withdraw(amount) (dexBlue.sol#2967)\n\tState variables written after the call(s):\n\t- balances[address(0)][msg.sender] += amount (dexBlue.sol#2975)\n",
                "markdown": "Reentrancy in [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981):\n\tExternal calls:\n\t- [Token(wrappedEtherContract).transferFrom(msg.sender,address(this),amount)](dexBlue.sol#L2949)\n\t- [WETH(wrappedEtherContract).withdraw(amount)](dexBlue.sol#L2967)\n\tState variables written after the call(s):\n\t- [balances[address(0)][msg.sender] += amount](dexBlue.sol#L2975)\n",
                "first_markdown_element": "dexBlue.sol#L2945-L2981",
                "id": "2460aa426eee9b09e75870449b41c0172504c94c020a249c8c38efd1895b352f",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (dexBlue.sol#2059-2075)\n\t- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (dexBlue.sol#2085)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\tExternal calls sending eth:\n\t- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\tState variables written after the call(s):\n\t- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (dexBlue.sol#2205)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount)](dexBlue.sol#L2059-L2075)\n\t- [Token(trades[prev].giveToken).transfer(reserve,receiveAmount)](dexBlue.sol#L2085)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\tExternal calls sending eth:\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\tState variables written after the call(s):\n\t- [blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0](dexBlue.sol#L2205)\n",
                "first_markdown_element": "dexBlue.sol#L1991-L2287",
                "id": "307d47a5973fc5f2002ee4daffaa151fbc0e3cc9e976ee62c91c597053af43ef",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135):\n\tExternal calls:\n\t- Token(token).transfer(receiving_address,amount) (dexBlue.sol#3109)\n\tExternal calls sending eth:\n\t- require(bool,string)(receiving_address.send(amount),Sending of ETH failed.) (dexBlue.sol#3099-3105)\n\tState variables written after the call(s):\n\t- blocked_for_single_sig_withdrawal[token][msg.sender] = 0 (dexBlue.sol#3123)\n",
                "markdown": "Reentrancy in [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135):\n\tExternal calls:\n\t- [Token(token).transfer(receiving_address,amount)](dexBlue.sol#L3109)\n\tExternal calls sending eth:\n\t- [require(bool,string)(receiving_address.send(amount),Sending of ETH failed.)](dexBlue.sol#L3099-L3105)\n\tState variables written after the call(s):\n\t- [blocked_for_single_sig_withdrawal[token][msg.sender] = 0](dexBlue.sol#L3123)\n",
                "first_markdown_element": "dexBlue.sol#L3059-L3135",
                "id": "565355deebb504e4c8d5e7a461eb34faf9cb8309de7d3e86b5a1fc8ff5b8bee6",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889):\n\tExternal calls:\n\t- Token(sell_token).transferFrom(msg.sender,reserve,sell_amount) (dexBlue.sol#2807)\n\t- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (dexBlue.sol#2825-2835)\n\tExternal calls sending eth:\n\t- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (dexBlue.sol#2825-2835)\n\tState variables written after the call(s):\n\t- balances[buy_token][reserve] -= output (dexBlue.sol#2847)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889):\n\tExternal calls:\n\t- [Token(sell_token).transferFrom(msg.sender,reserve,sell_amount)](dexBlue.sol#L2807)\n\t- [output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output)](dexBlue.sol#L2825-L2835)\n\tExternal calls sending eth:\n\t- [output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output)](dexBlue.sol#L2825-L2835)\n\tState variables written after the call(s):\n\t- [balances[buy_token][reserve] -= output](dexBlue.sol#L2847)\n",
                "first_markdown_element": "dexBlue.sol#L2757-L2889",
                "id": "801d6f409956293dce94b150687179c8e7811c90ee0dc2ab1c3ce5e3deeba13a",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (dexBlue.sol#2379-2397)\n\t- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (dexBlue.sol#2407)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\tExternal calls sending eth:\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\tState variables written after the call(s):\n\t- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (dexBlue.sol#2529)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount)](dexBlue.sol#L2379-L2397)\n\t- [Token(trades[prev].giveToken).transfer(reserve,receiveAmount)](dexBlue.sol#L2407)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\tExternal calls sending eth:\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\tState variables written after the call(s):\n\t- [blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0](dexBlue.sol#L2529)\n",
                "first_markdown_element": "dexBlue.sol#L2303-L2611",
                "id": "835178e5b1d3a1d958f4a5ec02411c7645f09cf835aa99414f60827dc58b80f0",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513):\n\tExternal calls:\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (dexBlue.sol#1407-1435)\n\tState variables written after the call(s):\n\t- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (dexBlue.sol#1477)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513):\n\tExternal calls:\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data)))](dexBlue.sol#L1407-L1435)\n\tState variables written after the call(s):\n\t- [blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0](dexBlue.sol#L1477)\n",
                "first_markdown_element": "dexBlue.sol#L1337-L1513",
                "id": "ad72cb3835a25e5b054a39e17a55c36a4df441733499dc5aeac7ac55eda19998",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319):\n\tExternal calls:\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\tState variables written after the call(s):\n\t- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (dexBlue.sol#1283)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319):\n\tExternal calls:\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\tState variables written after the call(s):\n\t- [blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0](dexBlue.sol#L1283)\n",
                "first_markdown_element": "dexBlue.sol#L1147-L1319",
                "id": "b1c7d624ac3abe58581826d29471c1ae83787651ed86e1bd83e0659475d73a6d",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405):\n\tExternal calls:\n\t- Token(token).transfer(account,amount - fee) (dexBlue.sol#3369)\n\tExternal calls sending eth:\n\t- require(bool,string)(account.send(amount - fee),Sending of ETH failed.) (dexBlue.sol#3359-3365)\n\tState variables written after the call(s):\n\t- blocked_for_single_sig_withdrawal[token][account] = 0 (dexBlue.sol#3383)\n",
                "markdown": "Reentrancy in [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405):\n\tExternal calls:\n\t- [Token(token).transfer(account,amount - fee)](dexBlue.sol#L3369)\n\tExternal calls sending eth:\n\t- [require(bool,string)(account.send(amount - fee),Sending of ETH failed.)](dexBlue.sol#L3359-L3365)\n\tState variables written after the call(s):\n\t- [blocked_for_single_sig_withdrawal[token][account] = 0](dexBlue.sol#L3383)\n",
                "first_markdown_element": "dexBlue.sol#L3241-L3405",
                "id": "b1fe0d0d73ba2c5a2b157c98cbf9b0ae44b54a1997fa0d82377f45701f4515e6",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009):\n\tExternal calls:\n\t- Token(token).transferFrom(msg.sender,address(this),amount) (dexBlue.sol#2995)\n\tState variables written after the call(s):\n\t- balances[token][msg.sender] += amount (dexBlue.sol#3005)\n",
                "markdown": "Reentrancy in [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009):\n\tExternal calls:\n\t- [Token(token).transferFrom(msg.sender,address(this),amount)](dexBlue.sol#L2995)\n\tState variables written after the call(s):\n\t- [balances[token][msg.sender] += amount](dexBlue.sol#L3005)\n",
                "first_markdown_element": "dexBlue.sol#L2993-L3009",
                "id": "c53c4451a9e0ed6c629f2794b41a9e867748983113d19fcc1ad466e52ffc10c1",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765):\n\tExternal calls:\n\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1747-1755)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (dexBlue.sol#1541-1563)\n\tState variables written after the call(s):\n\t- ! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i])) (dexBlue.sol#1699-1707)\n\t\t- blocked_for_single_sig_withdrawal[makerOrder.sellToken][makerOrder.signee] = 0 (dexBlue.sol#1113)\n\t\t- blocked_for_single_sig_withdrawal[takerOrder.sellToken][takerOrder.signee] = 0 (dexBlue.sol#1115)\n\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t\t- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (dexBlue.sol#1283)\n\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t\t- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (dexBlue.sol#1283)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765):\n\tExternal calls:\n\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1747-L1755)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade)))](dexBlue.sol#L1541-L1563)\n\tState variables written after the call(s):\n\t- [! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i]))](dexBlue.sol#L1699-L1707)\n\t\t- [blocked_for_single_sig_withdrawal[makerOrder.sellToken][makerOrder.signee] = 0](dexBlue.sol#L1113)\n\t\t- [blocked_for_single_sig_withdrawal[takerOrder.sellToken][takerOrder.signee] = 0](dexBlue.sol#L1115)\n\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t\t- [blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0](dexBlue.sol#L1283)\n\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t\t- [blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0](dexBlue.sol#L1283)\n",
                "first_markdown_element": "dexBlue.sol#L1663-L1765",
                "id": "f80956fedbb0aab72fdeb8ccf0f06f5a1a4980677de6e054875cd6a0cddabef9",
                "check": "reentrancy-benign",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.depositToken(address,uint256) (dexBlue.sol#2993-3009):\n\tExternal calls:\n\t- Token(token).transferFrom(msg.sender,address(this),amount) (dexBlue.sol#2995)\n\tEvent emitted after the call(s):\n\t- LogDeposit(msg.sender,token,amount) (dexBlue.sol#3007)\n",
                "markdown": "Reentrancy in [dexBlue.depositToken(address,uint256)](dexBlue.sol#L2993-L3009):\n\tExternal calls:\n\t- [Token(token).transferFrom(msg.sender,address(this),amount)](dexBlue.sol#L2995)\n\tEvent emitted after the call(s):\n\t- [LogDeposit(msg.sender,token,amount)](dexBlue.sol#L3007)\n",
                "first_markdown_element": "dexBlue.sol#L2993-L3009",
                "id": "2465a62e1c7c32b8746609249baa1b980f80f770a55f19222e254a3aea98f582",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (dexBlue.sol#2059-2075)\n\t- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (dexBlue.sol#2085)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\tExternal calls sending eth:\n\t- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\t- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (dexBlue.sol#2099-2117)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(reserve,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) (dexBlue.sol#2129)\n\t- LogTrade(trades[prev].giveToken,trades[prev].giveAmount,trades[i].giveToken,trades[i].giveAmount) (dexBlue.sol#2211)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount)](dexBlue.sol#L2059-L2075)\n\t- [Token(trades[prev].giveToken).transfer(reserve,receiveAmount)](dexBlue.sol#L2085)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\tExternal calls sending eth:\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\t- [require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate))](dexBlue.sol#L2099-L2117)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(reserve,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee)](dexBlue.sol#L2129)\n\t- [LogTrade(trades[prev].giveToken,trades[prev].giveAmount,trades[i].giveToken,trades[i].giveAmount)](dexBlue.sol#L2211)\n",
                "first_markdown_element": "dexBlue.sol#L1991-L2287",
                "id": "2f98c20a0f7d5d3f2923d92d56b9dca36cb82d35c3f1367b4b626448e8f70400",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513):\n\tExternal calls:\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (dexBlue.sol#1407-1435)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee) (dexBlue.sol#1491)\n\t- LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount) (dexBlue.sol#1483)\n\t- LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount) (dexBlue.sol#1487)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513):\n\tExternal calls:\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data)))](dexBlue.sol#L1407-L1435)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee)](dexBlue.sol#L1491)\n\t- [LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount)](dexBlue.sol#L1483)\n\t- [LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount)](dexBlue.sol#L1487)\n",
                "first_markdown_element": "dexBlue.sol#L1337-L1513",
                "id": "35f02ece46be475e894321dfa62ee5ff9ff425355836817977f586e95f6f36b4",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (dexBlue.sol#1857-1899):\n\tExternal calls:\n\t- ! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput),data) (dexBlue.sol#1871-1893)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (dexBlue.sol#1407-1435)\n\t- ! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput),data) (dexBlue.sol#1871-1893)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (dexBlue.sol#1407-1435)\n\tEvent emitted after the call(s):\n\t- LogTradeFailed() (dexBlue.sol#1895)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[])](dexBlue.sol#L1857-L1899):\n\tExternal calls:\n\t- [! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput),data)](dexBlue.sol#L1871-L1893)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data)))](dexBlue.sol#L1407-L1435)\n\t- [! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput),data)](dexBlue.sol#L1871-L1893)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data)))](dexBlue.sol#L1407-L1435)\n\tEvent emitted after the call(s):\n\t- [LogTradeFailed()](dexBlue.sol#L1895)\n",
                "first_markdown_element": "dexBlue.sol#L1857-L1899",
                "id": "552bd7639917f4b0d6d3d5ef5e820ca938b82277c91d2f8b91b1ca2aa01e9d84",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#1811-1843):\n\tExternal calls:\n\t- ! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput)) (dexBlue.sol#1817-1837)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput)) (dexBlue.sol#1817-1837)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\tEvent emitted after the call(s):\n\t- LogTradeFailed() (dexBlue.sol#1839)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1811-L1843):\n\tExternal calls:\n\t- [! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput))](dexBlue.sol#L1817-L1837)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput))](dexBlue.sol#L1817-L1837)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\tEvent emitted after the call(s):\n\t- [LogTradeFailed()](dexBlue.sol#L1839)\n",
                "first_markdown_element": "dexBlue.sol#L1811-L1843",
                "id": "5e4f0dc2032e13ab8be87b327e0c68a414e3ffefe1e50beefc0bde9fe8483935",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765):\n\tExternal calls:\n\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1747-1755)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (dexBlue.sol#1541-1563)\n\tEvent emitted after the call(s):\n\t- LogTradeFailed() (dexBlue.sol#1741)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765):\n\tExternal calls:\n\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1747-L1755)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade)))](dexBlue.sol#L1541-L1563)\n\tEvent emitted after the call(s):\n\t- [LogTradeFailed()](dexBlue.sol#L1741)\n",
                "first_markdown_element": "dexBlue.sol#L1663-L1765",
                "id": "64edc790fd0cf5098b3f062b8a8279eb92583e0eca77870466e673f06263a8c5",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (dexBlue.sol#2379-2397)\n\t- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (dexBlue.sol#2407)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\tExternal calls sending eth:\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\t- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (dexBlue.sol#2421-2441)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(reserve,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) (dexBlue.sol#2453)\n\t- LogTrade(trades[prev].giveToken,trades[prev].giveAmount,trades[i].giveToken,trades[i].giveAmount) (dexBlue.sol#2535)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount)](dexBlue.sol#L2379-L2397)\n\t- [Token(trades[prev].giveToken).transfer(reserve,receiveAmount)](dexBlue.sol#L2407)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\tExternal calls sending eth:\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\t- [require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i]))](dexBlue.sol#L2421-L2441)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(reserve,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee)](dexBlue.sol#L2453)\n\t- [LogTrade(trades[prev].giveToken,trades[prev].giveAmount,trades[i].giveToken,trades[i].giveAmount)](dexBlue.sol#L2535)\n",
                "first_markdown_element": "dexBlue.sol#L2303-L2611",
                "id": "6edc34ea581d9eff9cb8ac3b4a54d540138b83a38a41d0155d824b5f9a121e54",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889):\n\tExternal calls:\n\t- Token(sell_token).transferFrom(msg.sender,reserve,sell_amount) (dexBlue.sol#2807)\n\t- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (dexBlue.sol#2825-2835)\n\t- Token(buy_token).transfer(msg.sender,output) (dexBlue.sol#2863)\n\tExternal calls sending eth:\n\t- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (dexBlue.sol#2825-2835)\n\t- require(bool,string)(msg.sender.send(output),Sending of ETH failed.) (dexBlue.sol#2853-2859)\n\tEvent emitted after the call(s):\n\t- LogSwap(sell_token,sell_amount,buy_token,output) (dexBlue.sol#2877)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889):\n\tExternal calls:\n\t- [Token(sell_token).transferFrom(msg.sender,reserve,sell_amount)](dexBlue.sol#L2807)\n\t- [output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output)](dexBlue.sol#L2825-L2835)\n\t- [Token(buy_token).transfer(msg.sender,output)](dexBlue.sol#L2863)\n\tExternal calls sending eth:\n\t- [output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output)](dexBlue.sol#L2825-L2835)\n\t- [require(bool,string)(msg.sender.send(output),Sending of ETH failed.)](dexBlue.sol#L2853-L2859)\n\tEvent emitted after the call(s):\n\t- [LogSwap(sell_token,sell_amount,buy_token,output)](dexBlue.sol#L2877)\n",
                "first_markdown_element": "dexBlue.sol#L2757-L2889",
                "id": "90ffcf37b69c94e492f1b044ec68890b2a59f84b6469883eec5f2d2a26ce4f71",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765):\n\tExternal calls:\n\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1747-1755)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (dexBlue.sol#1541-1563)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee) (dexBlue.sol#1297)\n\t\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t- LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee) (dexBlue.sol#1297)\n\t\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t- LogTrade(makerOrder.sellToken,trade.makerAmount,takerOrder.sellToken,trade.takerAmount) (dexBlue.sol#1119)\n\t\t- ! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i])) (dexBlue.sol#1699-1707)\n\t- LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount) (dexBlue.sol#1289)\n\t\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t- LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount) (dexBlue.sol#1289)\n\t\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t- LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount) (dexBlue.sol#1293)\n\t\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t- LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount) (dexBlue.sol#1293)\n\t\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t- LogTradeFailed() (dexBlue.sol#1709)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765):\n\tExternal calls:\n\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1747-L1755)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade)))](dexBlue.sol#L1541-L1563)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee)](dexBlue.sol#L1297)\n\t\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t- [LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee)](dexBlue.sol#L1297)\n\t\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t- [LogTrade(makerOrder.sellToken,trade.makerAmount,takerOrder.sellToken,trade.takerAmount)](dexBlue.sol#L1119)\n\t\t- [! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i]))](dexBlue.sol#L1699-L1707)\n\t- [LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount)](dexBlue.sol#L1289)\n\t\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t- [LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount)](dexBlue.sol#L1289)\n\t\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t- [LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount)](dexBlue.sol#L1293)\n\t\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t- [LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount)](dexBlue.sol#L1293)\n\t\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t- [LogTradeFailed()](dexBlue.sol#L1709)\n",
                "first_markdown_element": "dexBlue.sol#L1663-L1765",
                "id": "96d01b0aaee09ca3ed677387f2a3621047ac3296ac2a42ef9ac1af5ab85245a2",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (dexBlue.sol#3851-3867)\n\t- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (dexBlue.sol#3877)\n\t- Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee) (dexBlue.sol#3939)\n\t- dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) (dexBlue.sol#3955-3965)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\tExternal calls sending eth:\n\t- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (dexBlue.sol#3929-3935)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee) (dexBlue.sol#3981)\n\t- LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee) (dexBlue.sol#3983)\n\t- LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount) (dexBlue.sol#3977)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount)](dexBlue.sol#L3851-L3867)\n\t- [Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee)](dexBlue.sol#L3877)\n\t- [Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee)](dexBlue.sol#L3939)\n\t- [dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee)](dexBlue.sol#L3955-L3965)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\tExternal calls sending eth:\n\t- [require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.)](dexBlue.sol#L3929-L3935)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee)](dexBlue.sol#L3981)\n\t- [LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee)](dexBlue.sol#L3983)\n\t- [LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount)](dexBlue.sol#L3977)\n",
                "first_markdown_element": "dexBlue.sol#L3831-L3989",
                "id": "a49c06a66b02a82fec7611f461d2f23cf68cebc686eee3f355626ab41c17dcaa",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135):\n\tExternal calls:\n\t- Token(token).transfer(receiving_address,amount) (dexBlue.sol#3109)\n\tExternal calls sending eth:\n\t- require(bool,string)(receiving_address.send(amount),Sending of ETH failed.) (dexBlue.sol#3099-3105)\n\tEvent emitted after the call(s):\n\t- LogWithdrawal(msg.sender,token,amount) (dexBlue.sol#3127)\n",
                "markdown": "Reentrancy in [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135):\n\tExternal calls:\n\t- [Token(token).transfer(receiving_address,amount)](dexBlue.sol#L3109)\n\tExternal calls sending eth:\n\t- [require(bool,string)(receiving_address.send(amount),Sending of ETH failed.)](dexBlue.sol#L3099-L3105)\n\tEvent emitted after the call(s):\n\t- [LogWithdrawal(msg.sender,token,amount)](dexBlue.sol#L3127)\n",
                "first_markdown_element": "dexBlue.sol#L3059-L3135",
                "id": "b0c223267946d902dfe891332968697766fa1d536589cc65a0e9d8ac0b2cd3da",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405):\n\tExternal calls:\n\t- Token(token).transfer(account,amount - fee) (dexBlue.sol#3369)\n\tExternal calls sending eth:\n\t- require(bool,string)(account.send(amount - fee),Sending of ETH failed.) (dexBlue.sol#3359-3365)\n\tEvent emitted after the call(s):\n\t- LogWithdrawal(account,token,amount) (dexBlue.sol#3387)\n",
                "markdown": "Reentrancy in [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405):\n\tExternal calls:\n\t- [Token(token).transfer(account,amount - fee)](dexBlue.sol#L3369)\n\tExternal calls sending eth:\n\t- [require(bool,string)(account.send(amount - fee),Sending of ETH failed.)](dexBlue.sol#L3359-L3365)\n\tEvent emitted after the call(s):\n\t- [LogWithdrawal(account,token,amount)](dexBlue.sol#L3387)\n",
                "first_markdown_element": "dexBlue.sol#L3241-L3405",
                "id": "bef2ff056658aae4fec5369e0506b1c8aca30f719c1d989e089e14c9d7da8714",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519):\n\tExternal calls:\n\t- Token(token).transfer(msg.sender,amount) (dexBlue.sol#3497)\n\tExternal calls sending eth:\n\t- require(bool,string)(msg.sender.send(amount),Sending of ETH failed.) (dexBlue.sol#3487-3493)\n\tEvent emitted after the call(s):\n\t- LogSingleSigWithdrawal(msg.sender,token,amount) (dexBlue.sol#3511)\n",
                "markdown": "Reentrancy in [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519):\n\tExternal calls:\n\t- [Token(token).transfer(msg.sender,amount)](dexBlue.sol#L3497)\n\tExternal calls sending eth:\n\t- [require(bool,string)(msg.sender.send(amount),Sending of ETH failed.)](dexBlue.sol#L3487-L3493)\n\tEvent emitted after the call(s):\n\t- [LogSingleSigWithdrawal(msg.sender,token,amount)](dexBlue.sol#L3511)\n",
                "first_markdown_element": "dexBlue.sol#L3451-L3519",
                "id": "c0a98474d3d3367fa230c5fcd57722ac9792e24ac25492d783155c58118c6943",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765):\n\tExternal calls:\n\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1747-1755)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (dexBlue.sol#1541-1563)\n\tEvent emitted after the call(s):\n\t- LogTradeFailed() (dexBlue.sol#1725)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765):\n\tExternal calls:\n\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1747-L1755)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade)))](dexBlue.sol#L1541-L1563)\n\tEvent emitted after the call(s):\n\t- [LogTradeFailed()](dexBlue.sol#L1725)\n",
                "first_markdown_element": "dexBlue.sol#L1663-L1765",
                "id": "c5a79edcd344464581342c8486ef88626e646e22356d275cdbd7bacbe5b0e88b",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.depositWrappedEther(uint256) (dexBlue.sol#2945-2981):\n\tExternal calls:\n\t- Token(wrappedEtherContract).transferFrom(msg.sender,address(this),amount) (dexBlue.sol#2949)\n\t- WETH(wrappedEtherContract).withdraw(amount) (dexBlue.sol#2967)\n\tEvent emitted after the call(s):\n\t- LogDeposit(msg.sender,address(0),amount) (dexBlue.sol#2979)\n",
                "markdown": "Reentrancy in [dexBlue.depositWrappedEther(uint256)](dexBlue.sol#L2945-L2981):\n\tExternal calls:\n\t- [Token(wrappedEtherContract).transferFrom(msg.sender,address(this),amount)](dexBlue.sol#L2949)\n\t- [WETH(wrappedEtherContract).withdraw(amount)](dexBlue.sol#L2967)\n\tEvent emitted after the call(s):\n\t- [LogDeposit(msg.sender,address(0),amount)](dexBlue.sol#L2979)\n",
                "first_markdown_element": "dexBlue.sol#L2945-L2981",
                "id": "d9f6c43f72359627e9fbad7ba6f951d691e3f5fc8894386f5bdd1e9ee0a4bb28",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245):\n\tExternal calls:\n\t- Token(token).transfer(msg.sender,amount) (dexBlue.sol#5221)\n\tExternal calls sending eth:\n\t- require(bool,string)(msg.sender.send(amount),Sending of ETH failed.) (dexBlue.sol#5211-5217)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(msg.sender,token,amount) (dexBlue.sol#5235)\n",
                "markdown": "Reentrancy in [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245):\n\tExternal calls:\n\t- [Token(token).transfer(msg.sender,amount)](dexBlue.sol#L5221)\n\tExternal calls sending eth:\n\t- [require(bool,string)(msg.sender.send(amount),Sending of ETH failed.)](dexBlue.sol#L5211-L5217)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(msg.sender,token,amount)](dexBlue.sol#L5235)\n",
                "first_markdown_element": "dexBlue.sol#L5189-L5245",
                "id": "f12bdbac9629144a6b578e811cd2ee571ee75fc9dcace0e91637f6605bc15212",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175):\n\tExternal calls:\n\t- require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (dexBlue.sol#4033-4051)\n\t- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (dexBlue.sol#4061)\n\t- Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee) (dexBlue.sol#4125)\n\t- dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) (dexBlue.sol#4141-4151)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\tExternal calls sending eth:\n\t- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (dexBlue.sol#4115-4121)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee) (dexBlue.sol#4167)\n\t- LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee) (dexBlue.sol#4169)\n\t- LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount) (dexBlue.sol#4163)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175):\n\tExternal calls:\n\t- [require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount)](dexBlue.sol#L4033-L4051)\n\t- [Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee)](dexBlue.sol#L4061)\n\t- [Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee)](dexBlue.sol#L4125)\n\t- [dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee)](dexBlue.sol#L4141-L4151)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\tExternal calls sending eth:\n\t- [require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.)](dexBlue.sol#L4115-L4121)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee)](dexBlue.sol#L4167)\n\t- [LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee)](dexBlue.sol#L4169)\n\t- [LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount)](dexBlue.sol#L4163)\n",
                "first_markdown_element": "dexBlue.sol#L4009-L4175",
                "id": "f2fd369dcfb34c1a30b8cde801bd4936ee261cb38499bbb988dcb363f4a82ca3",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319):\n\tExternal calls:\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee) (dexBlue.sol#1297)\n\t- LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount) (dexBlue.sol#1289)\n\t- LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount) (dexBlue.sol#1293)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319):\n\tExternal calls:\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee)](dexBlue.sol#L1297)\n\t- [LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount)](dexBlue.sol#L1289)\n\t- [LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount)](dexBlue.sol#L1293)\n",
                "first_markdown_element": "dexBlue.sol#L1147-L1319",
                "id": "fe647886cd951b02f319ea2444d6614942bc1423095b8e1e3bd2dd4ef2860a77",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765):\n\tExternal calls:\n\t- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1715-1723)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\t- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (dexBlue.sol#1731-1739)\n\t\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n\tEvent emitted after the call(s):\n\t- LogTradeFailed() (dexBlue.sol#1757)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765):\n\tExternal calls:\n\t- [! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1715-L1723)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\t- [! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i]))](dexBlue.sol#L1731-L1739)\n\t\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n\tEvent emitted after the call(s):\n\t- [LogTradeFailed()](dexBlue.sol#L1757)\n",
                "first_markdown_element": "dexBlue.sol#L1663-L1765",
                "id": "fedae6530c17ec211220e2d9064448eb5b45c1f45ece6d825fc23501a0e01e0d",
                "check": "reentrancy-events",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)((deadline == 0 || deadline > block.timestamp),Call deadline exceeded.) (dexBlue.sol#2759-2771)\n",
                "markdown": "[dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)((deadline == 0 || deadline > block.timestamp),Call deadline exceeded.)](dexBlue.sol#L2759-L2771)\n",
                "first_markdown_element": "dexBlue.sol#L2757-L2889",
                "id": "23a458298af4caff456115b70f9a1e934f570c26ece190dbf4f012c1a233f4b2",
                "check": "timestamp",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- balances[order.sellToken][order.signee] >= trade.orderAmount - trade.orderRebate && order.expiry > block.timestamp && trade.orderAmount - trade.orderRebate <= order.sellAmount * trade.reserveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trade.orderAmount - trade.orderRebate + orderMatched <= order.sellAmount && trade.orderFee <= trade.reserveAmount / 20 && trade.reserveFee <= trade.orderAmount / 20 && trade.orderRebate <= trade.reserveFee && trade.reserveRebate <= trade.orderFee (dexBlue.sol#1359-1399)\n",
                "markdown": "[dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [balances[order.sellToken][order.signee] >= trade.orderAmount - trade.orderRebate && order.expiry > block.timestamp && trade.orderAmount - trade.orderRebate <= order.sellAmount * trade.reserveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trade.orderAmount - trade.orderRebate + orderMatched <= order.sellAmount && trade.orderFee <= trade.reserveAmount / 20 && trade.reserveFee <= trade.orderAmount / 20 && trade.orderRebate <= trade.reserveFee && trade.reserveRebate <= trade.orderFee](dexBlue.sol#L1359-L1399)\n",
                "first_markdown_element": "dexBlue.sol#L1337-L1513",
                "id": "3dc3078f9d276fdf2921d9ddd66c224c41b5b4243fb5e2c572de54fdbf27f73d",
                "check": "timestamp",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#1991-2287) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(order.buyToken == trades[prev].giveToken && order.sellToken == trades[i].giveToken && order.expiry > block.timestamp && balances[order.sellToken][order.signee] >= trades[i].giveAmount - trades[i].rebate && trades[i].giveAmount - trades[i].rebate <= order.sellAmount * trades[prev].giveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trades[i].giveAmount - trades[i].rebate + orderMatched <= order.sellAmount) (dexBlue.sol#2143-2181)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L1991-L2287) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool)(order.buyToken == trades[prev].giveToken && order.sellToken == trades[i].giveToken && order.expiry > block.timestamp && balances[order.sellToken][order.signee] >= trades[i].giveAmount - trades[i].rebate && trades[i].giveAmount - trades[i].rebate <= order.sellAmount * trades[prev].giveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trades[i].giveAmount - trades[i].rebate + orderMatched <= order.sellAmount)](dexBlue.sol#L2143-L2181)\n",
                "first_markdown_element": "dexBlue.sol#L1991-L2287",
                "id": "4fc99581173392261c4956289c38ee726dd1932d58295546257277689df30523",
                "check": "timestamp",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#2303-2611) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(order.buyToken == trades[prev].giveToken && order.sellToken == trades[i].giveToken && order.expiry > block.timestamp && balances[order.sellToken][order.signee] >= trades[i].giveAmount - trades[i].rebate && trades[i].giveAmount - trades[i].rebate <= order.sellAmount * trades[prev].giveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trades[i].giveAmount - trades[i].rebate + orderMatched <= order.sellAmount) (dexBlue.sol#2467-2505)\n",
                "markdown": "[dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L2303-L2611) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool)(order.buyToken == trades[prev].giveToken && order.sellToken == trades[i].giveToken && order.expiry > block.timestamp && balances[order.sellToken][order.signee] >= trades[i].giveAmount - trades[i].rebate && trades[i].giveAmount - trades[i].rebate <= order.sellAmount * trades[prev].giveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trades[i].giveAmount - trades[i].rebate + orderMatched <= order.sellAmount)](dexBlue.sol#L2467-L2505)\n",
                "first_markdown_element": "dexBlue.sol#L2303-L2611",
                "id": "5469a133bfe02ff110124195e9c3fc271ecfb3400dbef6da17690bfecaa352a3",
                "check": "timestamp",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- balances[token][msg.sender] >= amount && ((blocked_for_single_sig_withdrawal[token][msg.sender] >= amount && last_blocked_timestamp[msg.sender] + single_sig_waiting_period <= block.timestamp) || single_sig_waiting_period == 0) (dexBlue.sol#3455-3469)\n",
                "markdown": "[dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [balances[token][msg.sender] >= amount && ((blocked_for_single_sig_withdrawal[token][msg.sender] >= amount && last_blocked_timestamp[msg.sender] + single_sig_waiting_period <= block.timestamp) || single_sig_waiting_period == 0)](dexBlue.sol#L3455-L3469)\n",
                "first_markdown_element": "dexBlue.sol#L3451-L3519",
                "id": "6e2df915cd01d6a9d46dff1702f28fe19c05053706f30644c48071ed801ba1e5",
                "check": "timestamp",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- balances[order.sellToken][order.signee] >= trade.orderAmount - trade.orderRebate && order.expiry > block.timestamp && trade.orderAmount - trade.orderRebate <= order.sellAmount * trade.reserveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trade.orderAmount - trade.orderRebate + orderMatched <= order.sellAmount && trade.orderFee <= trade.reserveAmount / 20 && trade.reserveFee <= trade.orderAmount / 20 && trade.orderRebate <= trade.reserveFee && trade.reserveRebate <= trade.orderFee (dexBlue.sol#1167-1207)\n",
                "markdown": "[dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [balances[order.sellToken][order.signee] >= trade.orderAmount - trade.orderRebate && order.expiry > block.timestamp && trade.orderAmount - trade.orderRebate <= order.sellAmount * trade.reserveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trade.orderAmount - trade.orderRebate + orderMatched <= order.sellAmount && trade.orderFee <= trade.reserveAmount / 20 && trade.reserveFee <= trade.orderAmount / 20 && trade.orderRebate <= trade.reserveFee && trade.reserveRebate <= trade.orderFee](dexBlue.sol#L1167-L1207)\n",
                "first_markdown_element": "dexBlue.sol#L1147-L1319",
                "id": "88dc9a64889e5ec81633be0dc2e29dd608470111cfd9a0070eebf82fc3791276",
                "check": "timestamp",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (dexBlue.sol#993-1131) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- makerOrder.buyToken == takerOrder.sellToken && takerOrder.buyToken == makerOrder.sellToken && makerOrder.expiry > block.timestamp && takerOrder.expiry > block.timestamp && balances[makerOrder.sellToken][makerOrder.signee] >= trade.makerAmount - trade.makerRebate && balances[takerOrder.sellToken][takerOrder.signee] >= trade.takerAmount && trade.makerAmount - trade.makerRebate <= makerOrder.sellAmount * trade.takerAmount / makerOrder.buyAmount + 1 && trade.takerAmount <= takerOrder.sellAmount * trade.makerAmount / takerOrder.buyAmount + 1 && makerOrder.sellAmount > makerOrderMatched && takerOrder.sellAmount > takerOrderMatched && trade.makerAmount - trade.makerRebate + makerOrderMatched <= makerOrder.sellAmount && trade.takerAmount + takerOrderMatched <= takerOrder.sellAmount && trade.makerFee <= trade.takerAmount / 20 && trade.takerFee <= trade.makerAmount / 20 && trade.makerRebate <= trade.takerFee (dexBlue.sol#1015-1071)\n",
                "markdown": "[dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade)](dexBlue.sol#L993-L1131) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [makerOrder.buyToken == takerOrder.sellToken && takerOrder.buyToken == makerOrder.sellToken && makerOrder.expiry > block.timestamp && takerOrder.expiry > block.timestamp && balances[makerOrder.sellToken][makerOrder.signee] >= trade.makerAmount - trade.makerRebate && balances[takerOrder.sellToken][takerOrder.signee] >= trade.takerAmount && trade.makerAmount - trade.makerRebate <= makerOrder.sellAmount * trade.takerAmount / makerOrder.buyAmount + 1 && trade.takerAmount <= takerOrder.sellAmount * trade.makerAmount / takerOrder.buyAmount + 1 && makerOrder.sellAmount > makerOrderMatched && takerOrder.sellAmount > takerOrderMatched && trade.makerAmount - trade.makerRebate + makerOrderMatched <= makerOrder.sellAmount && trade.takerAmount + takerOrderMatched <= takerOrder.sellAmount && trade.makerFee <= trade.takerAmount / 20 && trade.takerFee <= trade.makerAmount / 20 && trade.makerRebate <= trade.takerFee](dexBlue.sol#L1015-L1071)\n",
                "first_markdown_element": "dexBlue.sol#L993-L1131",
                "id": "99bd651b85ff166933b122dae132317f9a0aca3c3bb543bd22b557129ea7ffee",
                "check": "timestamp",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256) (dexBlue.sol#2703-2737) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)((deadline == 0 || deadline > block.timestamp),Call deadline exceeded.) (dexBlue.sol#2705-2717)\n",
                "markdown": "[dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256)](dexBlue.sol#L2703-L2737) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)((deadline == 0 || deadline > block.timestamp),Call deadline exceeded.)](dexBlue.sol#L2705-L2717)\n",
                "first_markdown_element": "dexBlue.sol#L2703-L2737",
                "id": "b007871b4d34fbcf0ab41c790f244c39fecef9b7861ac5d80ebccf2d12a92db0",
                "check": "timestamp",
                "impact": "Low",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueUtils.checkERC20TransferSuccess() (dexBlue.sol#359-389) uses assembly\n\t- INLINE ASM (dexBlue.sol#365-383)\n",
                "markdown": "[dexBlueUtils.checkERC20TransferSuccess()](dexBlue.sol#L359-L389) uses assembly\n\t- [INLINE ASM](dexBlue.sol#L365-L383)\n",
                "first_markdown_element": "dexBlue.sol#L359-L389",
                "id": "2d70bcdde45df6599158c3f36974dd35ac6da31c524a9379127de937e79d696b",
                "check": "assembly",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "dexBlue.restoreChildContractAddress(uint256) (dexBlue.sol#4697-4795) uses assembly\n\t- INLINE ASM (dexBlue.sol#4773-4787)\n",
                "markdown": "[dexBlue.restoreChildContractAddress(uint256)](dexBlue.sol#L4697-L4795) uses assembly\n\t- [INLINE ASM](dexBlue.sol#L4773-L4787)\n",
                "first_markdown_element": "dexBlue.sol#L4697-L4795",
                "id": "53f4d22cf64118d7ed48d768d1fd7d604349c804a5821d576bf4b8afc3cf63b8",
                "check": "assembly",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "dexBlue.createChildContract() (dexBlue.sol#4673-4685) uses assembly\n\t- INLINE ASM (dexBlue.sol#4675-4683)\n",
                "markdown": "[dexBlue.createChildContract()](dexBlue.sol#L4673-L4685) uses assembly\n\t- [INLINE ASM](dexBlue.sol#L4675-L4683)\n",
                "first_markdown_element": "dexBlue.sol#L4673-L4685",
                "id": "f5855ce5f5adaa7e8672a802aa7df12642cc13bf389d96c7a4a3e034992df2a9",
                "check": "assembly",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "dexBlue.removePublicReserveAddress(address) (dexBlue.sol#5007-5037) has costly operations inside a loop:\n\t- delete public_reserve_arr[public_reserve_arr.length - 1] (dexBlue.sol#5025)\n",
                "markdown": "[dexBlue.removePublicReserveAddress(address)](dexBlue.sol#L5007-L5037) has costly operations inside a loop:\n\t- [delete public_reserve_arr[public_reserve_arr.length - 1]](dexBlue.sol#L5025)\n",
                "first_markdown_element": "dexBlue.sol#L5007-L5037",
                "id": "682723f1ae158a364f1b14677df1f5dbcbdbc00ce86c85a8f5e0eda247fcf62c",
                "check": "costly-loop",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.removeTokenAddressFromArr(address) (dexBlue.sol#5073-5099) has costly operations inside a loop:\n\t- delete token_arr[token_arr.length - 1] (dexBlue.sol#5087)\n",
                "markdown": "[dexBlue.removeTokenAddressFromArr(address)](dexBlue.sol#L5073-L5099) has costly operations inside a loop:\n\t- [delete token_arr[token_arr.length - 1]](dexBlue.sol#L5087)\n",
                "first_markdown_element": "dexBlue.sol#L5073-L5099",
                "id": "ecc71a03dafa3de2faaebb664d6ad5d8e1e23f1ecbab0d8d918358b6ef0bb4cb",
                "check": "costly-loop",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Pragma version0.5.11 (dexBlue.sol#1) allows old versions\n",
                "markdown": "Pragma version[0.5.11](dexBlue.sol#L1) allows old versions\n",
                "first_markdown_element": "dexBlue.sol#L1",
                "id": "be6d9073317be14c49ed31acc54bcd0ebc26399349ae8c138fdd039d2b19a6d6",
                "check": "solc-version",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "solc-0.5.11 is not recommended for deployment\n",
                "markdown": "solc-0.5.11 is not recommended for deployment\n",
                "first_markdown_element": "",
                "id": "d3bcf07a6ef1efa85e2deea753a2feee14d3b263b881c698197d19af627735a7",
                "check": "solc-version",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (dexBlue.sol#3599-3617):\n\t- settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3605)\n",
                "markdown": "Low level call in [dexBlue.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[])](dexBlue.sol#L3599-L3617):\n\t- [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3605)\n",
                "first_markdown_element": "dexBlue.sol#L3599-L3617",
                "id": "0ef79e1da2f8a03a87c4fd6b2230992406f2964f1fdebb3857974e5f71d82a88",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.spendGasTokens(uint256) (dexBlue.sol#4639-4663):\n\t- restoreChildContractAddress(i).call() (dexBlue.sol#4653)\n",
                "markdown": "Low level call in [dexBlue.spendGasTokens(uint256)](dexBlue.sol#L4639-L4663):\n\t- [restoreChildContractAddress(i).call()](dexBlue.sol#L4653)\n",
                "first_markdown_element": "dexBlue.sol#L4639-L4663",
                "id": "2352979ff46f29860ecfadfac13bbcf4009f00360ffaeab5fa1fa88b5b488c68",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (dexBlue.sol#3627-3645):\n\t- settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3633)\n",
                "markdown": "Low level call in [dexBlue.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L3627-L3645):\n\t- [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3633)\n",
                "first_markdown_element": "dexBlue.sol#L3627-L3645",
                "id": "29f60319296e840fc60f81653e3788baca170c8673f6b85aa634adabbe035648",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (dexBlue.sol#1147-1319):\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (dexBlue.sol#1215-1241)\n",
                "markdown": "Low level call in [dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade)](dexBlue.sol#L1147-L1319):\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve)))](dexBlue.sol#L1215-L1241)\n",
                "first_markdown_element": "dexBlue.sol#L1147-L1319",
                "id": "3ec4c49d6931cc9c9e8c44da431fa18fffbc19b0b84d9fca94a1b21f37b08949",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (dexBlue.sol#3781-3813):\n\t- settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3787)\n",
                "markdown": "Low level call in [dexBlue.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][])](dexBlue.sol#L3781-L3813):\n\t- [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3787)\n",
                "first_markdown_element": "dexBlue.sol#L3781-L3813",
                "id": "46eab81bb7ceac1564c2ff1b6deadc0f79de2b59c133121102d97f0c9a306334",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#1529-1575):\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (dexBlue.sol#1541-1563)\n",
                "markdown": "Low level call in [dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L1529-L1575):\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade)))](dexBlue.sol#L1541-L1563)\n",
                "first_markdown_element": "dexBlue.sol#L1529-L1575",
                "id": "49b46c9afea10fa885069faf82d4066eed35cae2555f09e1603943bd128c8abc",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#3537-3555):\n\t- settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3543)\n",
                "markdown": "Low level call in [dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L3537-L3555):\n\t- [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3543)\n",
                "first_markdown_element": "dexBlue.sol#L3537-L3555",
                "id": "4c2ed23d80ab2d81f8480d9a385d5369d12bc9e220d48c42c5417f063c1267f7",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#1597-1651):\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTradeWithData.selector,abi.encode(makerReserve,takerReserve,trade,makerData,takerData))) (dexBlue.sol#1613-1639)\n",
                "markdown": "Low level call in [dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L1597-L1651):\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTradeWithData.selector,abi.encode(makerReserve,takerReserve,trade,makerData,takerData)))](dexBlue.sol#L1613-L1639)\n",
                "first_markdown_element": "dexBlue.sol#L1597-L1651",
                "id": "4e68be247544d288816e7ffa08e49d5a023de957d787624f2e5ffde063257496",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (dexBlue.sol#3659-3677):\n\t- settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3665)\n",
                "markdown": "Low level call in [dexBlue.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[])](dexBlue.sol#L3659-L3677):\n\t- [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3665)\n",
                "first_markdown_element": "dexBlue.sol#L3659-L3677",
                "id": "6ef94212e7d8b6d9323882c176af8fb02527581b6f1bdae887464e43d8e2f8cc",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (dexBlue.sol#1337-1513):\n\t- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (dexBlue.sol#1407-1435)\n",
                "markdown": "Low level call in [dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[])](dexBlue.sol#L1337-L1513):\n\t- [(txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data)))](dexBlue.sol#L1407-L1435)\n",
                "first_markdown_element": "dexBlue.sol#L1337-L1513",
                "id": "813a3f8429365ca9082b772da22fc31faa358dae45506f65c5561d39924b499a",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#3691-3723):\n\t- settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3697)\n",
                "markdown": "Low level call in [dexBlue.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L3691-L3723):\n\t- [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3697)\n",
                "first_markdown_element": "dexBlue.sol#L3691-L3723",
                "id": "936685fc440ddedf349eb3e611c145ff78183eea2300c2d1dea092b5eb2135b9",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (dexBlue.sol#3735-3767):\n\t- settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3741)\n",
                "markdown": "Low level call in [dexBlue.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[])](dexBlue.sol#L3735-L3767):\n\t- [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3741)\n",
                "first_markdown_element": "dexBlue.sol#L3735-L3767",
                "id": "9de20fa8339d3447e74de7ed3920f426090eb263b8e225a24aa78140664d546b",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.swap(address,uint256,address,uint256,uint256) (dexBlue.sol#4465-4479):\n\t- (success,returnData) = settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#4469)\n",
                "markdown": "Low level call in [dexBlue.swap(address,uint256,address,uint256,uint256)](dexBlue.sol#L4465-L4479):\n\t- [(success,returnData) = settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L4469)\n",
                "first_markdown_element": "dexBlue.sol#L4465-L4479",
                "id": "f2dae0f0705cfa3e1c6930b60ae4edfe34e0ef6fc65d10be262de34dbcbd0d60",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#3567-3585):\n\t- settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#3573)\n",
                "markdown": "Low level call in [dexBlue.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L3567-L3585):\n\t- [settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L3573)\n",
                "first_markdown_element": "dexBlue.sol#L3567-L3585",
                "id": "f3c5109c9659020fcc0e0a46cd3f25501c05876a60a205bdc635f50d5eae5bba",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Low level call in dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#4499-4513):\n\t- (success,returnData) = settlementModuleAddress.delegatecall(msg.data) (dexBlue.sol#4503)\n",
                "markdown": "Low level call in [dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L4499-L4513):\n\t- [(success,returnData) = settlementModuleAddress.delegatecall(msg.data)](dexBlue.sol#L4503)\n",
                "first_markdown_element": "dexBlue.sol#L4499-L4513",
                "id": "fbf870aba108b1e29cd0ff3c79c2a462c3115adc76cc760c339b9da000b444ad",
                "check": "low-level-calls",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.trade(address,uint256,address,uint256).sell_amount (dexBlue.sol#5257) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.trade(address,uint256,address,uint256).sell_amount](dexBlue.sol#L5257) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5257",
                "id": "00bbdc8d6bc3af66ae6b76430777619511537fe26b61347e3f18b0f5983d5a63",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Contract dexBlueStorage (dexBlue.sol#149-203) is not in CapWords\n",
                "markdown": "Contract [dexBlueStorage](dexBlue.sol#L149-L203) is not in CapWords\n",
                "first_markdown_element": "dexBlue.sol#L149-L203",
                "id": "03e0bdf3129fce24728d960e3f6aef184a16ccc28c471b46bf959e6a40c83156",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.reserve_indices (dexBlue.sol#183) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.reserve_indices](dexBlue.sol#L183) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L183",
                "id": "0fc818ed039ddf51efdf8da1d574236f1478696181038797cd2636ee7101e349",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offerExecuted(address,uint256,address,uint256).sell_token (dexBlue.sol#5281) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offerExecuted(address,uint256,address,uint256).sell_token](dexBlue.sol#L5281) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5281",
                "id": "11ffb174ffcaf8c2ec125b82ccde4e0f5c3dd96bc7cb0fc2bfa6de949e7b6a9f",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.getBestReserve(address,uint256,address).sell_token (dexBlue.sol#4417) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.getBestReserve(address,uint256,address).sell_token](dexBlue.sol#L4417) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4417",
                "id": "1366c7f6a0b594e0b5482de42e9b3a601e15d3f94250cfc75c8e94cfa346be27",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.getSwapOutput(address,uint256,address).sell_token (dexBlue.sol#2633) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.getSwapOutput(address,uint256,address).sell_token](dexBlue.sol#L2633) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2633",
                "id": "14d0300207ed60e207adb4df3072796e7d4d0b2ae025c7cdfab0a95264799c68",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.blocked_for_single_sig_withdrawal (dexBlue.sol#157) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.blocked_for_single_sig_withdrawal](dexBlue.sol#L157) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L157",
                "id": "16513d13818a8be8d059288b247d420f19fed157b88f7987311c3f9a3459b478",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlue.gas_token_nonce_tail (dexBlue.sol#4595) is not in mixedCase\n",
                "markdown": "Variable [dexBlue.gas_token_nonce_tail](dexBlue.sol#L4595) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4595",
                "id": "16a973b347801a6ca84c6d0a77b49ae06c1d91b006eec4a3e07406871b77ee3c",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address).receiving_address (dexBlue.sol#3157) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address).receiving_address](dexBlue.sol#L3157) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L3157",
                "id": "16ea112d41e0770ac369170b2773228e5f84758fce7d223168551f62259c6981",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_amount (dexBlue.sol#2757) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_amount](dexBlue.sol#L2757) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2757",
                "id": "193fa6a28d98b61e98fdbdcd250ba21d1c23046ab43c4622ee04addb324f9da9",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).min_output (dexBlue.sol#2757) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).min_output](dexBlue.sol#L2757) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2757",
                "id": "2476e367d9e78cc4e1316486079450894f6e2d8963abdfd50755a68856c3b55e",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.getBestReserve(address,uint256,address).sell_token (dexBlue.sol#2655) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.getBestReserve(address,uint256,address).sell_token](dexBlue.sol#L2655) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2655",
                "id": "25a8d45eec4ee39c1ce8e2f574e12f74559c662c65ddaddc29042998f492018d",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_token (dexBlue.sol#4499) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_token](dexBlue.sol#L4499) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4499",
                "id": "292b899471fe1689f1dc4d8f3feebdc3e332cdbd1983e0aa820c8941327cd301",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Constant dexBlue.settlementModuleAddress (dexBlue.sol#2899) is not in UPPER_CASE_WITH_UNDERSCORES\n",
                "markdown": "Constant [dexBlue.settlementModuleAddress](dexBlue.sol#L2899) is not in UPPER_CASE_WITH_UNDERSCORES\n",
                "first_markdown_element": "dexBlue.sol#L2899",
                "id": "2a68bb1ba655ca6c33ed4b10266f65aa5a1eba4aa180d6a445ec52d87a49d615",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.processed_withdrawals (dexBlue.sol#163) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.processed_withdrawals](dexBlue.sol#L163) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L163",
                "id": "31d076e9cbfe341f1e12f27ab483972f9f59660074eab6898dfc81cf79dd2688",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.last_blocked_timestamp (dexBlue.sol#159) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.last_blocked_timestamp](dexBlue.sol#L159) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L159",
                "id": "3442b050363d863ad448e4653c425468eb57374c56ad0c5e1839896ccb6fcc69",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_token (dexBlue.sol#2757) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_token](dexBlue.sol#L2757) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2757",
                "id": "36e31d504123aa5eeebf8108b66e107092c9309967524b64c3b38aa00c19f8b8",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Contract dexBlueEvents (dexBlue.sol#7-145) is not in CapWords\n",
                "markdown": "Contract [dexBlueEvents](dexBlue.sol#L7-L145) is not in CapWords\n",
                "first_markdown_element": "dexBlue.sol#L7-L145",
                "id": "3781830fb46a07022d0071febffda7b13bfb11fe2ffeb9a8ccd7fea4b48b1a32",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offer(address,uint256,address,uint256).sell_token (dexBlue.sol#5269) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offer(address,uint256,address,uint256).sell_token](dexBlue.sol#L5269) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5269",
                "id": "4122b795855d047b1deaf58accf734af7951dd4c5800dac737f2451bf08475a6",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.swap(address,uint256,address,uint256,uint256).min_output (dexBlue.sol#4465) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.swap(address,uint256,address,uint256,uint256).min_output](dexBlue.sol#L4465) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4465",
                "id": "419df8df00af2d14e53ee0adc2f937f5bf219fbea91c068ad557aa5f4b23db7f",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).min_output (dexBlue.sol#2703) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).min_output](dexBlue.sol#L2703) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2703",
                "id": "42c5749619b85a6bae2b7b09c2556e1ba2c70435713f6c90b4f365e3cad32014",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).sell_token (dexBlue.sol#5263) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).sell_token](dexBlue.sol#L5263) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5263",
                "id": "42ed8437977ccfc4912535415b9895a9b5b97ca026962e34b6c948ebca9f7d24",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.swap(address,uint256,address,uint256).sell_amount (dexBlue.sol#5287) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.swap(address,uint256,address,uint256).sell_amount](dexBlue.sol#L5287) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5287",
                "id": "4341d058268f00c007b42a78a2bda339134dded9c24da043ea99a08f4f0e9639",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlue.gas_token_nonce_head (dexBlue.sol#4593) is not in mixedCase\n",
                "markdown": "Variable [dexBlue.gas_token_nonce_head](dexBlue.sol#L4593) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4593",
                "id": "467e53a31a3585f958d52498765ab5234a2d128f5e643ce9fcac9240dfa4fafb",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.getSwapOutput(address,uint256,address).sell_token (dexBlue.sol#4395) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.getSwapOutput(address,uint256,address).sell_token](dexBlue.sol#L4395) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4395",
                "id": "48b24dce0d3986b9bf3ddadd466f0fb5b863560b168f9714a9d20d76fac3d318",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address).receiving_address (dexBlue.sol#3059) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address).receiving_address](dexBlue.sol#L3059) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L3059",
                "id": "48fa207ec934c53c1e45ee4150edd74403b9b3a99193a69cffd31235cc7b56f5",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStructs.EIP712_DOMAIN_SEPARATOR (dexBlue.sol#415) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStructs.EIP712_DOMAIN_SEPARATOR](dexBlue.sol#L415) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L415",
                "id": "4a3c29579a94c60995c5d2667d195fa40171f1c092f94d33f354441e04b5de71",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.swap(address,uint256,address,uint256).sell_token (dexBlue.sol#5287) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.swap(address,uint256,address,uint256).sell_token](dexBlue.sol#L5287) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5287",
                "id": "4b2a3522979416de0a1e342ae97ee228794a98f4091c81e4064cdc04b1771064",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).sell_amount (dexBlue.sol#5275) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).sell_amount](dexBlue.sol#L5275) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5275",
                "id": "558c25afb92f9e0f57b30a3fdf09518e2868bd604b19a5fe5f8eafafc3b7f094",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.getBestReserve(address,uint256,address).sell_amount (dexBlue.sol#2655) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.getBestReserve(address,uint256,address).sell_amount](dexBlue.sol#L2655) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2655",
                "id": "5af9b23f69091e8dabe32a8ce5cb77322e2f62090467d9e137c7ec5fb68d4de5",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.getBestReserve(address,uint256,address).buy_token (dexBlue.sol#2655) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.getBestReserve(address,uint256,address).buy_token](dexBlue.sol#L2655) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2655",
                "id": "5ea8310481c73fb65bd9494745a7617400b6fd4da8a110bb2305d7873927f4e2",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.changeSingleSigWaitingPeriod(uint256).waiting_period (dexBlue.sol#4933) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.changeSingleSigWaitingPeriod(uint256).waiting_period](dexBlue.sol#L4933) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4933",
                "id": "601f5c124efc1257201c0b64682e7de4c5dbfe2793f72727e9b3e7f15081e552",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.token_indices (dexBlue.sol#175) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.token_indices](dexBlue.sol#L175) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L175",
                "id": "6042013e0ed88c8ff731111c8cca14072b67a9584c54fcc4ca6e334907c68d4d",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Contract dexBlueUtils (dexBlue.sol#207-391) is not in CapWords\n",
                "markdown": "Contract [dexBlueUtils](dexBlue.sol#L207-L391) is not in CapWords\n",
                "first_markdown_element": "dexBlue.sol#L207-L391",
                "id": "6319b8d618357aba393bb5ed76478c400df0a23e9297437ac910381fc8da00c5",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.swap(address,uint256,address,uint256).min_output (dexBlue.sol#5287) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.swap(address,uint256,address,uint256).min_output](dexBlue.sol#L5287) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5287",
                "id": "67ac52c720bfa5cc045714659ac95a0b5fd2b2ec2f6b47835e9f65448fbf4bc3",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).buy_amount (dexBlue.sol#5263) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).buy_amount](dexBlue.sol#L5263) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5263",
                "id": "67e41e80c0b5608830a4313243563c8be8e772272d4b2ed63c1b57a09242e05c",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).sell_amount (dexBlue.sol#5263) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).sell_amount](dexBlue.sol#L5263) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5263",
                "id": "70b26074db0ad80706de8f24d2d1140e02a46c98f1e67c9bea19520a189330e6",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.public_reserve_arr (dexBlue.sol#187) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.public_reserve_arr](dexBlue.sol#L187) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L187",
                "id": "71302e00352ef3e5b372c4806e2a04ca9d3da5f939d1be1eb40845f33f1484a5",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.swap(address,uint256,address,uint256).buy_token (dexBlue.sol#5287) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.swap(address,uint256,address,uint256).buy_token](dexBlue.sol#L5287) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5287",
                "id": "7361536141d5a4fe7cb528198157f31c73ffe8ec4f9f324e836ded34db9fe762",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).sell_token (dexBlue.sol#2703) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).sell_token](dexBlue.sol#L2703) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2703",
                "id": "7af97a8c12cb4f4fe30ddf7822e159bf2d9270378dd6f9b9c7b55ff50683ec49",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.cacheReserveAddress(address,uint256,bool).is_public (dexBlue.sol#4977) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.cacheReserveAddress(address,uint256,bool).is_public](dexBlue.sol#L4977) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4977",
                "id": "7bd9bafff0df72c158bcd0d81096561e9c4d520f31e8e91cdbaf931b3ff7dc08",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.getSwapOutput(address,uint256,address).sell_amount (dexBlue.sol#5293) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.getSwapOutput(address,uint256,address).sell_amount](dexBlue.sol#L5293) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5293",
                "id": "7f4b1d4e816950c1a80b9c1c63363d5dfa651053cb32b25d96d582483cd14a36",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.trade(address,uint256,address,uint256).sell_token (dexBlue.sol#5257) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.trade(address,uint256,address,uint256).sell_token](dexBlue.sol#L5257) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5257",
                "id": "8241d3ce652a5b51d2294c88473e836a3cab5ac5f1f6d6e2ecdb7e1aafa3eec5",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offerExecuted(address,uint256,address,uint256).buy_amount (dexBlue.sol#5281) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offerExecuted(address,uint256,address,uint256).buy_amount](dexBlue.sol#L5281) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5281",
                "id": "8474bc5875a04835186cffc5efa5ae47345622cbba40fa399e1df7e2ceaef78c",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.trade(address,uint256,address,uint256).buy_token (dexBlue.sol#5257) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.trade(address,uint256,address,uint256).buy_token](dexBlue.sol#L5257) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5257",
                "id": "8eb4a85ea30a84f7e8feaf1ebbc53d0d1f8b08f3f619b29d7216b85d3c382afc",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Constant dexBlue.wrappedEtherContract (dexBlue.sol#2943) is not in UPPER_CASE_WITH_UNDERSCORES\n",
                "markdown": "Constant [dexBlue.wrappedEtherContract](dexBlue.sol#L2943) is not in UPPER_CASE_WITH_UNDERSCORES\n",
                "first_markdown_element": "dexBlue.sol#L2943",
                "id": "909919448eee2505fb8cbbf2295d4b55e765d59569571e9b32d23d56f07c0845",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Contract dexBlueReserve (dexBlue.sol#5253-5295) is not in CapWords\n",
                "markdown": "Contract [dexBlueReserve](dexBlue.sol#L5253-L5295) is not in CapWords\n",
                "first_markdown_element": "dexBlue.sol#L5253-L5295",
                "id": "925676b4b1784af30bd5c44bd3e65ea878039babaf731a1df253bb93d930cb87",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).buy_token (dexBlue.sol#2757) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).buy_token](dexBlue.sol#L2757) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2757",
                "id": "96130a0534bd609ab9d3e55c5b42a1db3c59cd73bbafff39a489ec452f11fca3",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).sell_token (dexBlue.sol#5275) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).sell_token](dexBlue.sol#L5275) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5275",
                "id": "9ce039127a339a8d20c4dc9df3806861ebd37f1a0f898ec465858365a9461262",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.getBestReserve(address,uint256,address).sell_amount (dexBlue.sol#4417) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.getBestReserve(address,uint256,address).sell_amount](dexBlue.sol#L4417) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4417",
                "id": "ab426ce29cf0457558c1fadf72170f1f181521511ea40ab703c6644289c8046b",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.getSwapOutput(address,uint256,address).sell_amount (dexBlue.sol#2633) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.getSwapOutput(address,uint256,address).sell_amount](dexBlue.sol#L2633) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2633",
                "id": "b00bff9505906dd84efde890d1fc0704704d0620b27bf1498748c019fdc920a2",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.getSwapOutput(address,uint256,address).sell_token (dexBlue.sol#5293) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.getSwapOutput(address,uint256,address).sell_token](dexBlue.sol#L5293) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5293",
                "id": "b193f10c767641168fb2d9fc4b71d14539c7bb5f76a5328a82219faa09577f7f",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).buy_token (dexBlue.sol#5263) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).buy_token](dexBlue.sol#L5263) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5263",
                "id": "b1f0e31a7d1a5d8fac91be636a641c082a133e922cfba096ade5b4110e431a2c",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Contract dexBlue (dexBlue.sol#2895-5247) is not in CapWords\n",
                "markdown": "Contract [dexBlue](dexBlue.sol#L2895-L5247) is not in CapWords\n",
                "first_markdown_element": "dexBlue.sol#L2895-L5247",
                "id": "b26b4d2e3970ecec7a5c52dba52e6d86ef74e770ef4b3913c2a176fe9ded47f1",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.getSwapOutput(address,uint256,address).buy_token (dexBlue.sol#2633) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.getSwapOutput(address,uint256,address).buy_token](dexBlue.sol#L2633) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2633",
                "id": "b4d44717aa24331e83845dd54f2364db29239aab271bc81a056eb5ad9e06744c",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).buy_token (dexBlue.sol#2703) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).buy_token](dexBlue.sol#L2703) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2703",
                "id": "b599b395ba3f34f13c4efa0524bf30ad062cf78c09eccbe67622b2244d4ea121",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offer(address,uint256,address,uint256).sell_amount (dexBlue.sol#5269) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offer(address,uint256,address,uint256).sell_amount](dexBlue.sol#L5269) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5269",
                "id": "b8639fe1c59bf3b6619d604d10a623cfd7a57ce1c9c8ad70e800240101ed988b",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Contract dexBlueSettlementModule (dexBlue.sol#977-2891) is not in CapWords\n",
                "markdown": "Contract [dexBlueSettlementModule](dexBlue.sol#L977-L2891) is not in CapWords\n",
                "first_markdown_element": "dexBlue.sol#L977-L2891",
                "id": "bb7f848862141570db7c3ca9c9f7e4ff4641ed2711858c5e970547cba197dcd9",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.getBestReserve(address,uint256,address).buy_token (dexBlue.sol#4417) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.getBestReserve(address,uint256,address).buy_token](dexBlue.sol#L4417) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4417",
                "id": "c7b9b0e0d38a9baf0ab3e21b31d431679f98c574e0c2d7be901c277b27b027db",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Contract dexBlueStructs (dexBlue.sol#395-973) is not in CapWords\n",
                "markdown": "Contract [dexBlueStructs](dexBlue.sol#L395-L973) is not in CapWords\n",
                "first_markdown_element": "dexBlue.sol#L395-L973",
                "id": "d14060b30abd778dcf9fc35bd9e774b08862acf48a78952a1bb7fda09d4cf3b4",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.trade(address,uint256,address,uint256).buy_amount (dexBlue.sol#5257) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.trade(address,uint256,address,uint256).buy_amount](dexBlue.sol#L5257) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5257",
                "id": "d6b0047c0b9e81f160899b38042e3a6d1c66a3dd64ad10176e69bcfec9220c77",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).sell_amount (dexBlue.sol#2703) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).sell_amount](dexBlue.sol#L2703) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L2703",
                "id": "d76081985c044c26828e51cddcd3e6a55c26428f9bb078ef41495a86331f952b",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offer(address,uint256,address,uint256).buy_token (dexBlue.sol#5269) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offer(address,uint256,address,uint256).buy_token](dexBlue.sol#L5269) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5269",
                "id": "d902aba2c8106c01a003687b36d483ba29e5baeb558d991feb7ece6acd004544",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.swap(address,uint256,address,uint256,uint256).buy_token (dexBlue.sol#4465) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.swap(address,uint256,address,uint256,uint256).buy_token](dexBlue.sol#L4465) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4465",
                "id": "d994e2f9cf50ed739861678302c05d56f1a27ac9be01da2c35dc7c38f79976bb",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.changeOwner(address).new_owner (dexBlue.sol#4957) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.changeOwner(address).new_owner](dexBlue.sol#L4957) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4957",
                "id": "de7471f9bbd9dafdb4b3e9960942016b6fe8cd90962cc9a6df2bf8d5f292901f",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.getSwapOutput(address,uint256,address).buy_token (dexBlue.sol#4395) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.getSwapOutput(address,uint256,address).buy_token](dexBlue.sol#L4395) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4395",
                "id": "df6a2646c8542bd945d131d0252b2851dc672e87629953960f2b9026f7b78a83",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.single_sig_waiting_period (dexBlue.sol#201) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.single_sig_waiting_period](dexBlue.sol#L201) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L201",
                "id": "e35aa01d98e43851a044098dd2280857a9217bbd16ed3b9b5dbac1221dbfed4e",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Struct dexBlueStructs.EIP712_Domain (dexBlue.sol#401-411) is not in CapWords\n",
                "markdown": "Struct [dexBlueStructs.EIP712_Domain](dexBlue.sol#L401-L411) is not in CapWords\n",
                "first_markdown_element": "dexBlue.sol#L401-L411",
                "id": "e4f639cb41dc74c5f9786c8be50bce357aedbf1a46b6ace99cee8a3fa2254f99",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).buy_token (dexBlue.sol#5275) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).buy_token](dexBlue.sol#L5275) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5275",
                "id": "e769c2bb378d21eed70995842810ce093e126829a514435d12baafe875de659a",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.swap(address,uint256,address,uint256,uint256).sell_token (dexBlue.sol#4465) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.swap(address,uint256,address,uint256,uint256).sell_token](dexBlue.sol#L4465) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4465",
                "id": "e79103db7da03f007833f7e32abd025c84f5af3bbc414914726393d4e9357325",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offer(address,uint256,address,uint256).buy_amount (dexBlue.sol#5269) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offer(address,uint256,address,uint256).buy_amount](dexBlue.sol#L5269) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5269",
                "id": "e82171111a428e937195106383949873271e822411d9b3a2b36d7437e6382fb8",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.getSwapOutput(address,uint256,address).buy_token (dexBlue.sol#5293) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.getSwapOutput(address,uint256,address).buy_token](dexBlue.sol#L5293) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5293",
                "id": "e933c0113e25aebbe3a08f19ad93005dfcb4388bd4db688cc91a3d7696cc724e",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offerExecuted(address,uint256,address,uint256).buy_token (dexBlue.sol#5281) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offerExecuted(address,uint256,address,uint256).buy_token](dexBlue.sol#L5281) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5281",
                "id": "eb7af5f50b831efd11b5fe7b9504077dd24cdcbaa7d61c07694db585680ac6af",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).min_output (dexBlue.sol#4499) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).min_output](dexBlue.sol#L4499) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4499",
                "id": "eba86a80acb2d3a68a5656c3e1d542bbd8c629143ed0d86334d60b358779ff68",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offerExecuted(address,uint256,address,uint256).sell_amount (dexBlue.sol#5281) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offerExecuted(address,uint256,address,uint256).sell_amount](dexBlue.sol#L5281) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5281",
                "id": "ed2c538b66e91e7d0742d01d92f3d54a1dadd5ad8b34996c4befce4a7b13bb42",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_amount (dexBlue.sol#4499) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_amount](dexBlue.sol#L4499) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4499",
                "id": "ed8e6659c6e41a1f6ad578ab143a1f2a436430e5703f418d5deab9500ada0a77",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.public_reserves (dexBlue.sol#185) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.public_reserves](dexBlue.sol#L185) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L185",
                "id": "ef0c8f7d21e63f22153ab9ff8fb9b4473bb402b3c69b4cadd7e596f667b5e48e",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).buy_token (dexBlue.sol#4499) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).buy_token](dexBlue.sol#L4499) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4499",
                "id": "f16dbb0dc63bed47f8279d45d54fd931b9a62f342df653f283889b7f7ef00d1b",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.getSwapOutput(address,uint256,address).sell_amount (dexBlue.sol#4395) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.getSwapOutput(address,uint256,address).sell_amount](dexBlue.sol#L4395) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4395",
                "id": "f41c2a87df12407fdb3cb2f7171d6250d76e0f07c6012c8a217f0193de59a416",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Variable dexBlueStorage.token_arr (dexBlue.sol#177) is not in mixedCase\n",
                "markdown": "Variable [dexBlueStorage.token_arr](dexBlue.sol#L177) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L177",
                "id": "f7e26fd9b117c1ccddeee2ddfc1a46162814e9d5f7d63f73154dc87e44039168",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).buy_amount (dexBlue.sol#5275) is not in mixedCase\n",
                "markdown": "Parameter [dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).buy_amount](dexBlue.sol#L5275) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L5275",
                "id": "f807ce90789033379ca458d1248871bb3a137abb12dc2622aa4f67f5ad663c65",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Parameter dexBlue.swap(address,uint256,address,uint256,uint256).sell_amount (dexBlue.sol#4465) is not in mixedCase\n",
                "markdown": "Parameter [dexBlue.swap(address,uint256,address,uint256,uint256).sell_amount](dexBlue.sol#L4465) is not in mixedCase\n",
                "first_markdown_element": "dexBlue.sol#L4465",
                "id": "fdc9f029e2816534cf24514af5f6bd7f4f9ff167401f9c3cf6d270b69b666e72",
                "check": "naming-convention",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Reentrancy in dexBlue.initiateSingleSigWithdrawal(address,uint256) (dexBlue.sol#3451-3519):\n\tExternal calls:\n\t- require(bool,string)(msg.sender.send(amount),Sending of ETH failed.) (dexBlue.sol#3487-3493)\n\tEvent emitted after the call(s):\n\t- LogSingleSigWithdrawal(msg.sender,token,amount) (dexBlue.sol#3511)\n",
                "markdown": "Reentrancy in [dexBlue.initiateSingleSigWithdrawal(address,uint256)](dexBlue.sol#L3451-L3519):\n\tExternal calls:\n\t- [require(bool,string)(msg.sender.send(amount),Sending of ETH failed.)](dexBlue.sol#L3487-L3493)\n\tEvent emitted after the call(s):\n\t- [LogSingleSigWithdrawal(msg.sender,token,amount)](dexBlue.sol#L3511)\n",
                "first_markdown_element": "dexBlue.sol#L3451-L3519",
                "id": "00cc41a070711f1b6e3288ca46b22f171cf0fba05067e1824c6ccad841a4d958",
                "check": "reentrancy-unlimited-gas",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (dexBlue.sol#2757-2889):\n\tExternal calls:\n\t- require(bool,string)(msg.sender.send(output),Sending of ETH failed.) (dexBlue.sol#2853-2859)\n\tExternal calls sending eth:\n\t- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (dexBlue.sol#2825-2835)\n\t- require(bool,string)(msg.sender.send(output),Sending of ETH failed.) (dexBlue.sol#2853-2859)\n\tEvent emitted after the call(s):\n\t- LogSwap(sell_token,sell_amount,buy_token,output) (dexBlue.sol#2877)\n",
                "markdown": "Reentrancy in [dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256)](dexBlue.sol#L2757-L2889):\n\tExternal calls:\n\t- [require(bool,string)(msg.sender.send(output),Sending of ETH failed.)](dexBlue.sol#L2853-L2859)\n\tExternal calls sending eth:\n\t- [output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output)](dexBlue.sol#L2825-L2835)\n\t- [require(bool,string)(msg.sender.send(output),Sending of ETH failed.)](dexBlue.sol#L2853-L2859)\n\tEvent emitted after the call(s):\n\t- [LogSwap(sell_token,sell_amount,buy_token,output)](dexBlue.sol#L2877)\n",
                "first_markdown_element": "dexBlue.sol#L2757-L2889",
                "id": "072853ce0a4449a6e3356b81f9de2c30eb532456f710b8ad5e6e01b76225187c",
                "check": "reentrancy-unlimited-gas",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (dexBlue.sol#4009-4175):\n\tExternal calls:\n\t- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (dexBlue.sol#4115-4121)\n\tExternal calls sending eth:\n\t- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (dexBlue.sol#4115-4121)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\t- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#4077-4103)\n\tState variables written after the call(s):\n\t- balances[trade.makerToken][feeCollector] += trade.takerFee (dexBlue.sol#4157)\n\t- balances[trade.takerToken][feeCollector] += trade.makerFee (dexBlue.sol#4159)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee) (dexBlue.sol#4167)\n\t- LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee) (dexBlue.sol#4169)\n\t- LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount) (dexBlue.sol#4163)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[])](dexBlue.sol#L4009-L4175):\n\tExternal calls:\n\t- [require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.)](dexBlue.sol#L4115-L4121)\n\tExternal calls sending eth:\n\t- [require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.)](dexBlue.sol#L4115-L4121)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\t- [require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L4077-L4103)\n\tState variables written after the call(s):\n\t- [balances[trade.makerToken][feeCollector] += trade.takerFee](dexBlue.sol#L4157)\n\t- [balances[trade.takerToken][feeCollector] += trade.makerFee](dexBlue.sol#L4159)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee)](dexBlue.sol#L4167)\n\t- [LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee)](dexBlue.sol#L4169)\n\t- [LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount)](dexBlue.sol#L4163)\n",
                "first_markdown_element": "dexBlue.sol#L4009-L4175",
                "id": "3210be38dc7b0c5b222c728a05479137b3254b3a51c94042eec01ebfc59c34fb",
                "check": "reentrancy-unlimited-gas",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405):\n\tExternal calls:\n\t- require(bool,string)(account.send(amount - fee),Sending of ETH failed.) (dexBlue.sol#3359-3365)\n\tState variables written after the call(s):\n\t- blocked_for_single_sig_withdrawal[token][account] = 0 (dexBlue.sol#3383)\n\t- spendGasTokens(uint8(packedInput2[12])) (dexBlue.sol#3395)\n\t\t- gas_token_nonce_tail = tail + amount (dexBlue.sol#4659)\n\tEvent emitted after the call(s):\n\t- LogWithdrawal(account,token,amount) (dexBlue.sol#3387)\n",
                "markdown": "Reentrancy in [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405):\n\tExternal calls:\n\t- [require(bool,string)(account.send(amount - fee),Sending of ETH failed.)](dexBlue.sol#L3359-L3365)\n\tState variables written after the call(s):\n\t- [blocked_for_single_sig_withdrawal[token][account] = 0](dexBlue.sol#L3383)\n\t- [spendGasTokens(uint8(packedInput2[12]))](dexBlue.sol#L3395)\n\t\t- [gas_token_nonce_tail = tail + amount](dexBlue.sol#L4659)\n\tEvent emitted after the call(s):\n\t- [LogWithdrawal(account,token,amount)](dexBlue.sol#L3387)\n",
                "first_markdown_element": "dexBlue.sol#L3241-L3405",
                "id": "8c5e625ac848ee92d0527dad6f56d50516217b8fb1573c5fe5225688bf88ec12",
                "check": "reentrancy-unlimited-gas",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (dexBlue.sol#3831-3989):\n\tExternal calls:\n\t- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (dexBlue.sol#3929-3935)\n\tExternal calls sending eth:\n\t- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (dexBlue.sol#3929-3935)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\t- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (dexBlue.sol#3893-3917)\n\tState variables written after the call(s):\n\t- balances[trade.makerToken][feeCollector] += trade.takerFee (dexBlue.sol#3971)\n\t- balances[trade.takerToken][feeCollector] += trade.makerFee (dexBlue.sol#3973)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee) (dexBlue.sol#3981)\n\t- LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee) (dexBlue.sol#3983)\n\t- LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount) (dexBlue.sol#3977)\n",
                "markdown": "Reentrancy in [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade)](dexBlue.sol#L3831-L3989):\n\tExternal calls:\n\t- [require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.)](dexBlue.sol#L3929-L3935)\n\tExternal calls sending eth:\n\t- [require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.)](dexBlue.sol#L3929-L3935)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\t- [require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount)](dexBlue.sol#L3893-L3917)\n\tState variables written after the call(s):\n\t- [balances[trade.makerToken][feeCollector] += trade.takerFee](dexBlue.sol#L3971)\n\t- [balances[trade.takerToken][feeCollector] += trade.makerFee](dexBlue.sol#L3973)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee)](dexBlue.sol#L3981)\n\t- [LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee)](dexBlue.sol#L3983)\n\t- [LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount)](dexBlue.sol#L3977)\n",
                "first_markdown_element": "dexBlue.sol#L3831-L3989",
                "id": "8f0bf0318a7b1aff6ffbeb4cb19e80fe45bfab959c34449267bfd7599560a2cc",
                "check": "reentrancy-unlimited-gas",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (dexBlue.sol#3059-3135):\n\tExternal calls:\n\t- require(bool,string)(receiving_address.send(amount),Sending of ETH failed.) (dexBlue.sol#3099-3105)\n\tState variables written after the call(s):\n\t- blocked_for_single_sig_withdrawal[token][msg.sender] = 0 (dexBlue.sol#3123)\n\tEvent emitted after the call(s):\n\t- LogWithdrawal(msg.sender,token,amount) (dexBlue.sol#3127)\n",
                "markdown": "Reentrancy in [dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address)](dexBlue.sol#L3059-L3135):\n\tExternal calls:\n\t- [require(bool,string)(receiving_address.send(amount),Sending of ETH failed.)](dexBlue.sol#L3099-L3105)\n\tState variables written after the call(s):\n\t- [blocked_for_single_sig_withdrawal[token][msg.sender] = 0](dexBlue.sol#L3123)\n\tEvent emitted after the call(s):\n\t- [LogWithdrawal(msg.sender,token,amount)](dexBlue.sol#L3127)\n",
                "first_markdown_element": "dexBlue.sol#L3059-L3135",
                "id": "9898fb8cccd4d4d6638ddef405bd58f089af2f6f90e74d7882f38537ae57d350",
                "check": "reentrancy-unlimited-gas",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Reentrancy in dexBlue.directWithdrawal(address,uint256) (dexBlue.sol#5189-5245):\n\tExternal calls:\n\t- require(bool,string)(msg.sender.send(amount),Sending of ETH failed.) (dexBlue.sol#5211-5217)\n\tEvent emitted after the call(s):\n\t- LogDirectWithdrawal(msg.sender,token,amount) (dexBlue.sol#5235)\n",
                "markdown": "Reentrancy in [dexBlue.directWithdrawal(address,uint256)](dexBlue.sol#L5189-L5245):\n\tExternal calls:\n\t- [require(bool,string)(msg.sender.send(amount),Sending of ETH failed.)](dexBlue.sol#L5211-L5217)\n\tEvent emitted after the call(s):\n\t- [LogDirectWithdrawal(msg.sender,token,amount)](dexBlue.sol#L5235)\n",
                "first_markdown_element": "dexBlue.sol#L5189-L5245",
                "id": "a8ac615d02ef1742255e85610a127185b2b4dc8d1ad2d5332a6cd2018637d39e",
                "check": "reentrancy-unlimited-gas",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade).makerReserve (dexBlue.sol#1531) is too similar to dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade).takerReserve (dexBlue.sol#1533)\n",
                "markdown": "Variable [dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade).makerReserve](dexBlue.sol#L1531) is too similar to [dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade).takerReserve](dexBlue.sol#L1533)\n",
                "first_markdown_element": "dexBlue.sol#L1531",
                "id": "0119208fcf8ab8eeb4c9921100208858bddeb23e3c22a276c7fc821c07986396",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlueSettlementModule.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked).makerOrderInput (dexBlue.sol#1779) is too similar to dexBlueSettlementModule.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked).takerOrderInput (dexBlue.sol#1779)\n",
                "markdown": "Variable [dexBlueSettlementModule.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked).makerOrderInput](dexBlue.sol#L1779) is too similar to [dexBlueSettlementModule.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked).takerOrderInput](dexBlue.sol#L1779)\n",
                "first_markdown_element": "dexBlue.sol#L1779",
                "id": "01c9d1097adfabdb7d691254a3d5a7f2804432a3fae1a8e6fd60a57fb783540a",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade).makerReserve (dexBlue.sol#3833) is too similar to dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade).takerReserve (dexBlue.sol#3835)\n",
                "markdown": "Variable [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade).makerReserve](dexBlue.sol#L3833) is too similar to [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade).takerReserve](dexBlue.sol#L3835)\n",
                "first_markdown_element": "dexBlue.sol#L3833",
                "id": "1e539462c1b1b88692c6cb6b2235c1ba0ef7d84c02f57be6292b0b454adf0817",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade).makerReserve (dexBlue.sol#3833) is too similar to dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).takerReserve (dexBlue.sol#4013)\n",
                "markdown": "Variable [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade).makerReserve](dexBlue.sol#L3833) is too similar to [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).takerReserve](dexBlue.sol#L4013)\n",
                "first_markdown_element": "dexBlue.sol#L3833",
                "id": "260f1e323ed08ec8233a30196e4273c1da740d189a8beead5a6207eb020ad7ff",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).makerReserve (dexBlue.sol#1599) is too similar to dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade).takerReserve (dexBlue.sol#1533)\n",
                "markdown": "Variable [dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).makerReserve](dexBlue.sol#L1599) is too similar to [dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade).takerReserve](dexBlue.sol#L1533)\n",
                "first_markdown_element": "dexBlue.sol#L1599",
                "id": "30047b425460efe8e8242ef68907b0c09823b66b46506e4e0a95d872e201d5e7",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32).packedInput1 (dexBlue.sol#3241) is too similar to dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32).packedInput2 (dexBlue.sol#3241)\n",
                "markdown": "Variable [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32).packedInput1](dexBlue.sol#L3241) is too similar to [dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32).packedInput2](dexBlue.sol#L3241)\n",
                "first_markdown_element": "dexBlue.sol#L3241",
                "id": "542e31a5d0be00bfcf3433d4368ca276a1bc53ccb3d542d3c23f9717b030ef92",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).makerReserve (dexBlue.sol#1599) is too similar to dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).takerReserve (dexBlue.sol#1601)\n",
                "markdown": "Variable [dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).makerReserve](dexBlue.sol#L1599) is too similar to [dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).takerReserve](dexBlue.sol#L1601)\n",
                "first_markdown_element": "dexBlue.sol#L1599",
                "id": "85835fa19f8de2f9f2d4bffda3bc35be273950d590e3a45bd69b5b00aa03e506",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade).makerReserve (dexBlue.sol#1531) is too similar to dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).takerReserve (dexBlue.sol#1601)\n",
                "markdown": "Variable [dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade).makerReserve](dexBlue.sol#L1531) is too similar to [dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).takerReserve](dexBlue.sol#L1601)\n",
                "first_markdown_element": "dexBlue.sol#L1531",
                "id": "8ef2a0319f154f9b83ad8c1215b419b040905d935b71a179bf1629375e7a847b",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]).makerIdentifier (dexBlue.sol#1683) is too similar to dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]).takerIdentifier (dexBlue.sol#1685)\n",
                "markdown": "Variable [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]).makerIdentifier](dexBlue.sol#L1683) is too similar to [dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]).takerIdentifier](dexBlue.sol#L1685)\n",
                "first_markdown_element": "dexBlue.sol#L1683",
                "id": "9de70264fdbf777460fd812d61f19325b77c5a02a40741f5fc732f95a6d76191",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked).makerOrderInput (dexBlue.sol#3537) is too similar to dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked).takerOrderInput (dexBlue.sol#3537)\n",
                "markdown": "Variable [dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked).makerOrderInput](dexBlue.sol#L3537) is too similar to [dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked).takerOrderInput](dexBlue.sol#L3537)\n",
                "first_markdown_element": "dexBlue.sol#L3537",
                "id": "9f51938c0da6f37a0c1a182fa00a8112b30a13cdc3a9f5edf782d69418477cf2",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).makerReserve (dexBlue.sol#4011) is too similar to dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).takerReserve (dexBlue.sol#4013)\n",
                "markdown": "Variable [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).makerReserve](dexBlue.sol#L4011) is too similar to [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).takerReserve](dexBlue.sol#L4013)\n",
                "first_markdown_element": "dexBlue.sol#L4011",
                "id": "cebc850b27b09c5c6dade39b36af436f1e87bf152f2abea230537c18525c401a",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).makerReserve (dexBlue.sol#4011) is too similar to dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade).takerReserve (dexBlue.sol#3835)\n",
                "markdown": "Variable [dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]).makerReserve](dexBlue.sol#L4011) is too similar to [dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade).takerReserve](dexBlue.sol#L3835)\n",
                "first_markdown_element": "dexBlue.sol#L4011",
                "id": "f0a258a123bec33591f59efc875e91dd34cab55e98262c9889389d57e88adeef",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "Variable dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade).makerOrderMatched (dexBlue.sol#1005) is too similar to dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade).takerOrderMatched (dexBlue.sol#1007)\n",
                "markdown": "Variable [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade).makerOrderMatched](dexBlue.sol#L1005) is too similar to [dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade).takerOrderMatched](dexBlue.sol#L1007)\n",
                "first_markdown_element": "dexBlue.sol#L1005",
                "id": "fba42f166f14754da324e802f73cfd1e6770e0d12330127b07c32a3dc0ba7cd0",
                "check": "similar-names",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStructs.reserveReserveTradeFromInput(dexBlueStructs.TradeInputPacked) (dexBlue.sol#857-877) uses literals with too many digits:\n\t- ReserveReserveTrade({makerToken:tokens[uint256((packed.packedInput3 & 0x000000000000000000000000000000000000000000ffff000000000000000000) >> 72)],takerToken:tokens[uint256((packed.packedInput3 & 0x0000000000000000000000000000000000000000000000ffff00000000000000) >> 56)],makerAmount:uint256(packed.packedInput1 >> 128),takerAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerFee:uint256(packed.packedInput2 >> 128),takerFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)}) (dexBlue.sol#859-875)\n",
                "markdown": "[dexBlueStructs.reserveReserveTradeFromInput(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L857-L877) uses literals with too many digits:\n\t- [ReserveReserveTrade({makerToken:tokens[uint256((packed.packedInput3 & 0x000000000000000000000000000000000000000000ffff000000000000000000) >> 72)],takerToken:tokens[uint256((packed.packedInput3 & 0x0000000000000000000000000000000000000000000000ffff00000000000000) >> 56)],makerAmount:uint256(packed.packedInput1 >> 128),takerAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerFee:uint256(packed.packedInput2 >> 128),takerFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)})](dexBlue.sol#L859-L875)\n",
                "first_markdown_element": "dexBlue.sol#L857-L877",
                "id": "12aa3d707275c37c4d3fb895d3b0c08de3deecc9363a5b4932ddaaa8829f23f0",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (dexBlue.sol#1947-1979) uses literals with too many digits:\n\t- ! matchReserveWithReserveWithData(reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveReserveTradeFromInput(tradeInput),makerData,takerData) (dexBlue.sol#1961-1973)\n",
                "markdown": "[dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[])](dexBlue.sol#L1947-L1979) uses literals with too many digits:\n\t- [! matchReserveWithReserveWithData(reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveReserveTradeFromInput(tradeInput),makerData,takerData)](dexBlue.sol#L1961-L1973)\n",
                "first_markdown_element": "dexBlue.sol#L1947-L1979",
                "id": "175809ee54289d63c857f34707a2dbff142bedac6b7037800a71feca5f59c794",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#1811-1843) uses literals with too many digits:\n\t- ! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput)) (dexBlue.sol#1817-1837)\n",
                "markdown": "[dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1811-L1843) uses literals with too many digits:\n\t- [! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput))](dexBlue.sol#L1817-L1837)\n",
                "first_markdown_element": "dexBlue.sol#L1811-L1843",
                "id": "2066011b216d5838e8019548bfe6dd59442ef52ff00859076ce8d708c435d36d",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765) uses literals with too many digits:\n\t- takerIdentifier = uint256((tradeInput[i].packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88) (dexBlue.sol#1693)\n",
                "markdown": "[dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765) uses literals with too many digits:\n\t- [takerIdentifier = uint256((tradeInput[i].packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)](dexBlue.sol#L1693)\n",
                "first_markdown_element": "dexBlue.sol#L1663-L1765",
                "id": "257663f43bd999b5328e97d921c72bfe06ea2006d1225809a27872f6117a856c",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (dexBlue.sol#507-627) uses literals with too many digits:\n\t- order = Order({sellToken:tokens[uint256(orderInput.packedInput2 >> 240)],sellAmount:uint256(orderInput.packedInput1 >> 128),buyToken:tokens[uint256((orderInput.packedInput2 & 0x0000ffff00000000000000000000000000000000000000000000000000000000) >> 224)],buyAmount:uint256(orderInput.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),expiry:uint256((orderInput.packedInput2 & 0x00000000ffffffff000000000000000000000000000000000000000000000000) >> 192),hash:0x0,signee:address(0x0)}) (dexBlue.sol#511-527)\n",
                "markdown": "[dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked)](dexBlue.sol#L507-L627) uses literals with too many digits:\n\t- [order = Order({sellToken:tokens[uint256(orderInput.packedInput2 >> 240)],sellAmount:uint256(orderInput.packedInput1 >> 128),buyToken:tokens[uint256((orderInput.packedInput2 & 0x0000ffff00000000000000000000000000000000000000000000000000000000) >> 224)],buyAmount:uint256(orderInput.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),expiry:uint256((orderInput.packedInput2 & 0x00000000ffffffff000000000000000000000000000000000000000000000000) >> 192),hash:0x0,signee:address(0x0)})](dexBlue.sol#L511-L527)\n",
                "first_markdown_element": "dexBlue.sol#L507-L627",
                "id": "316716a3dd3636be0a09c6f8f6d32234c156d3132d7590658ca9ba340bf6d84a",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405) uses literals with too many digits:\n\t- fee = uint256(packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff) (dexBlue.sol#3275)\n",
                "markdown": "[dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405) uses literals with too many digits:\n\t- [fee = uint256(packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)](dexBlue.sol#L3275)\n",
                "first_markdown_element": "dexBlue.sol#L3241-L3405",
                "id": "4cd7c3c1fb203f6c9a7b0fa28a48f36a93fae650ef8efd10b21e321ad0da3edb",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStructs.ringTradeFromInput(dexBlueStructs.RingTradeInputPacked) (dexBlue.sol#951-971) uses literals with too many digits:\n\t- RingTrade({isReserve:(packed.packedInput2[16] == bytes1(0x01)),identifier:uint256((packed.packedInput2 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104),giveToken:tokens[uint256((packed.packedInput2 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],giveAmount:uint256(packed.packedInput1 >> 128),fee:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),rebate:uint256(packed.packedInput2 >> 128),gasLimit:uint256((packed.packedInput2 & 0x000000000000000000000000000000000000000000ffffff0000000000000000) >> 64)}) (dexBlue.sol#953-969)\n",
                "markdown": "[dexBlueStructs.ringTradeFromInput(dexBlueStructs.RingTradeInputPacked)](dexBlue.sol#L951-L971) uses literals with too many digits:\n\t- [RingTrade({isReserve:(packed.packedInput2[16] == bytes1(0x01)),identifier:uint256((packed.packedInput2 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104),giveToken:tokens[uint256((packed.packedInput2 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],giveAmount:uint256(packed.packedInput1 >> 128),fee:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),rebate:uint256(packed.packedInput2 >> 128),gasLimit:uint256((packed.packedInput2 & 0x000000000000000000000000000000000000000000ffffff0000000000000000) >> 64)})](dexBlue.sol#L953-L969)\n",
                "first_markdown_element": "dexBlue.sol#L951-L971",
                "id": "522263a24d793501a5961ab3952179f958267c2bd79569334f079c3f7ba05f2c",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (dexBlue.sol#507-627) uses literals with too many digits:\n\t- order.hash = keccak256(bytes)(abi.encodePacked(\u0019\u0001,EIP712_DOMAIN_SEPARATOR,keccak256(bytes)(abi.encode(EIP712_ORDER_TYPEHASH,order.sellToken,order.sellAmount,order.buyToken,order.buyAmount,order.expiry,uint256((orderInput.packedInput2 & 0x0000000000000000ffffffffffffffff00000000000000000000000000000000) >> 128))))) (dexBlue.sol#565-589)\n",
                "markdown": "[dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked)](dexBlue.sol#L507-L627) uses literals with too many digits:\n\t- [order.hash = keccak256(bytes)(abi.encodePacked(\u0019\u0001,EIP712_DOMAIN_SEPARATOR,keccak256(bytes)(abi.encode(EIP712_ORDER_TYPEHASH,order.sellToken,order.sellAmount,order.buyToken,order.buyAmount,order.expiry,uint256((orderInput.packedInput2 & 0x0000000000000000ffffffffffffffff00000000000000000000000000000000) >> 128)))))](dexBlue.sol#L565-L589)\n",
                "first_markdown_element": "dexBlue.sol#L507-L627",
                "id": "5e437bc13fed354a9bb9ffca6c5e2e69efd38eea884ccc49d95aec7068bd87b1",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (dexBlue.sol#3241-3405) uses literals with too many digits:\n\t- nonce = uint64(uint256((packedInput2 & 0x0000ffffffffffffffff00000000000000000000000000000000000000000000) >> 176)) (dexBlue.sol#3279)\n",
                "markdown": "[dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32)](dexBlue.sol#L3241-L3405) uses literals with too many digits:\n\t- [nonce = uint64(uint256((packedInput2 & 0x0000ffffffffffffffff00000000000000000000000000000000000000000000) >> 176))](dexBlue.sol#L3279)\n",
                "first_markdown_element": "dexBlue.sol#L3241-L3405",
                "id": "64f92e48fd5dd078db22177980ed9b5599b35e0bb9baa0a89259c2645fd317b9",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (dexBlue.sol#1663-1765) uses literals with too many digits:\n\t- makerIdentifier = uint256((tradeInput[i].packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104) (dexBlue.sol#1691)\n",
                "markdown": "[dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[])](dexBlue.sol#L1663-L1765) uses literals with too many digits:\n\t- [makerIdentifier = uint256((tradeInput[i].packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)](dexBlue.sol#L1691)\n",
                "first_markdown_element": "dexBlue.sol#L1663-L1765",
                "id": "6bc745c6d0ae7efb103ac7c3c80772d7fc514f0398ed8befb331183d1faff79b",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (dexBlue.sol#1857-1899) uses literals with too many digits:\n\t- ! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput),data) (dexBlue.sol#1871-1893)\n",
                "markdown": "[dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[])](dexBlue.sol#L1857-L1899) uses literals with too many digits:\n\t- [! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput),data)](dexBlue.sol#L1871-L1893)\n",
                "first_markdown_element": "dexBlue.sol#L1857-L1899",
                "id": "7586ad01c253b89f54aaf47eb99822bd364abf282fe8f4146e82fc7de5ffd49c",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (dexBlue.sol#1857-1899) uses literals with too many digits:\n\t- ! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput),data) (dexBlue.sol#1871-1893)\n",
                "markdown": "[dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[])](dexBlue.sol#L1857-L1899) uses literals with too many digits:\n\t- [! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput),data)](dexBlue.sol#L1871-L1893)\n",
                "first_markdown_element": "dexBlue.sol#L1857-L1899",
                "id": "7d3cb7b68f5c06510a6e80362ac412b8e1887f0c6f41071ee2c4c07db7bb229b",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStructs.tradeFromInput(dexBlueStructs.TradeInputPacked) (dexBlue.sol#765-781) uses literals with too many digits:\n\t- Trade({makerAmount:uint256(packed.packedInput1 >> 128),takerAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerFee:uint256(packed.packedInput2 >> 128),takerFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerRebate:uint256(packed.packedInput3 >> 128)}) (dexBlue.sol#767-779)\n",
                "markdown": "[dexBlueStructs.tradeFromInput(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L765-L781) uses literals with too many digits:\n\t- [Trade({makerAmount:uint256(packed.packedInput1 >> 128),takerAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerFee:uint256(packed.packedInput2 >> 128),takerFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerRebate:uint256(packed.packedInput3 >> 128)})](dexBlue.sol#L767-L779)\n",
                "first_markdown_element": "dexBlue.sol#L765-L781",
                "id": "8be1d4ec1ef22cef1fe48fc8f64e89611ab339105b7f3a195eee202d1fe33ed5",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (dexBlue.sol#1811-1843) uses literals with too many digits:\n\t- ! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput)) (dexBlue.sol#1817-1837)\n",
                "markdown": "[dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1811-L1843) uses literals with too many digits:\n\t- [! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput))](dexBlue.sol#L1817-L1837)\n",
                "first_markdown_element": "dexBlue.sol#L1811-L1843",
                "id": "999fa7562cc48c0e55564ea7ff8ac8d7407fe36635e8eadf5d234001c8829202",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (dexBlue.sol#1909-1933) uses literals with too many digits:\n\t- ! matchReserveWithReserve(reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveReserveTradeFromInput(tradeInput)) (dexBlue.sol#1919-1927)\n",
                "markdown": "[dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L1909-L1933) uses literals with too many digits:\n\t- [! matchReserveWithReserve(reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveReserveTradeFromInput(tradeInput))](dexBlue.sol#L1919-L1927)\n",
                "first_markdown_element": "dexBlue.sol#L1909-L1933",
                "id": "9a04feccadd6231a7ef4ca505464ca999906d1a8738c6fd2cbdf104769a6fb73",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (dexBlue.sol#507-627) uses literals with too many digits:\n\t- order.hash = keccak256(bytes)(abi.encodePacked(\u0019Ethereum Signed Message:\n32,keccak256(bytes)(abi.encodePacked(order.sellToken,uint128(order.sellAmount),order.buyToken,uint128(order.buyAmount),uint32(order.expiry),uint64(uint256((orderInput.packedInput2 & 0x0000000000000000ffffffffffffffff00000000000000000000000000000000) >> 128)),address(this))))) (dexBlue.sol#539-561)\n",
                "markdown": "[dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked)](dexBlue.sol#L507-L627) uses literals with too many digits:\n\t- [order.hash = keccak256(bytes)(abi.encodePacked(\u0019Ethereum Signed Message:\n32,keccak256(bytes)(abi.encodePacked(order.sellToken,uint128(order.sellAmount),order.buyToken,uint128(order.buyAmount),uint32(order.expiry),uint64(uint256((orderInput.packedInput2 & 0x0000000000000000ffffffffffffffff00000000000000000000000000000000) >> 128)),address(this)))))](dexBlue.sol#L539-L561)\n",
                "first_markdown_element": "dexBlue.sol#L507-L627",
                "id": "b081bc3a629315f2c1773569c526792b7213cfa3ba25a4fd018be9222ab0b53f",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStructs.reserveTradeFromInput(dexBlueStructs.TradeInputPacked) (dexBlue.sol#793-845) uses literals with too many digits:\n\t- ReserveTrade({orderAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),reserveAmount:uint256(packed.packedInput1 >> 128),orderFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),reserveFee:uint256(packed.packedInput2 >> 128),orderRebate:0,reserveRebate:uint256((packed.packedInput3 & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128),orderIsMaker:false,gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)}) (dexBlue.sol#823-841)\n",
                "markdown": "[dexBlueStructs.reserveTradeFromInput(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L793-L845) uses literals with too many digits:\n\t- [ReserveTrade({orderAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),reserveAmount:uint256(packed.packedInput1 >> 128),orderFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),reserveFee:uint256(packed.packedInput2 >> 128),orderRebate:0,reserveRebate:uint256((packed.packedInput3 & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128),orderIsMaker:false,gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)})](dexBlue.sol#L823-L841)\n",
                "first_markdown_element": "dexBlue.sol#L793-L845",
                "id": "de3d3818ed1dc5c2fb5f537039895261eeececcf97d271191672b8f3a728722b",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStructs.reserveTradeFromInput(dexBlueStructs.TradeInputPacked) (dexBlue.sol#793-845) uses literals with too many digits:\n\t- ReserveTrade({orderAmount:uint256(packed.packedInput1 >> 128),reserveAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),orderFee:uint256(packed.packedInput2 >> 128),reserveFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),orderRebate:uint256((packed.packedInput3 & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128),reserveRebate:0,orderIsMaker:true,gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)}) (dexBlue.sol#799-817)\n",
                "markdown": "[dexBlueStructs.reserveTradeFromInput(dexBlueStructs.TradeInputPacked)](dexBlue.sol#L793-L845) uses literals with too many digits:\n\t- [ReserveTrade({orderAmount:uint256(packed.packedInput1 >> 128),reserveAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),orderFee:uint256(packed.packedInput2 >> 128),reserveFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),orderRebate:uint256((packed.packedInput3 & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128),reserveRebate:0,orderIsMaker:true,gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)})](dexBlue.sol#L799-L817)\n",
                "first_markdown_element": "dexBlue.sol#L793-L845",
                "id": "e48cb3eee81be3af82dbd9d56cf156d8ea165c3c05b16f6331ffca00652d7345",
                "check": "too-many-digits",
                "impact": "Informational",
                "confidence": "Medium"
            },
            {
                "description": "dexBlueStorage.owner (dexBlue.sol#191) is never used in dexBlueSettlementModule (dexBlue.sol#977-2891)\n",
                "markdown": "[dexBlueStorage.owner](dexBlue.sol#L191) is never used in [dexBlueSettlementModule](dexBlue.sol#L977-L2891)\n",
                "first_markdown_element": "dexBlue.sol#L191",
                "id": "3f109eda1362a50f069abddcaefde43f60b842b2b1ddf31b76ce2c52be9d8e82",
                "check": "unused-state",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "dexBlueStructs.EIP712_DOMAIN_TYPEHASH (dexBlue.sol#413) is never used in dexBlueSettlementModule (dexBlue.sol#977-2891)\n",
                "markdown": "[dexBlueStructs.EIP712_DOMAIN_TYPEHASH](dexBlue.sol#L413) is never used in [dexBlueSettlementModule](dexBlue.sol#L977-L2891)\n",
                "first_markdown_element": "dexBlue.sol#L413",
                "id": "5d5feeedfdfe60d31cc768e579508571e85d963275f15c328729572b33735207",
                "check": "unused-state",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.processed_withdrawals (dexBlue.sol#163) is never used in dexBlueSettlementModule (dexBlue.sol#977-2891)\n",
                "markdown": "[dexBlueStorage.processed_withdrawals](dexBlue.sol#L163) is never used in [dexBlueSettlementModule](dexBlue.sol#L977-L2891)\n",
                "first_markdown_element": "dexBlue.sol#L163",
                "id": "66a43ce8079a7e816d4641704a12e5743bb9d7b336e445b163e44f5ac4e02570",
                "check": "unused-state",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.single_sig_waiting_period (dexBlue.sol#201) is never used in dexBlueSettlementModule (dexBlue.sol#977-2891)\n",
                "markdown": "[dexBlueStorage.single_sig_waiting_period](dexBlue.sol#L201) is never used in [dexBlueSettlementModule](dexBlue.sol#L977-L2891)\n",
                "first_markdown_element": "dexBlue.sol#L201",
                "id": "94b19852b3ef7d5f279547348e1387f4ad5d62b00b4c0b7e7ef1e7a5ab593279",
                "check": "unused-state",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "dexBlueStructs.EIP712_WITHDRAWAL_TYPEHASH (dexBlue.sol#423) is never used in dexBlueSettlementModule (dexBlue.sol#977-2891)\n",
                "markdown": "[dexBlueStructs.EIP712_WITHDRAWAL_TYPEHASH](dexBlue.sol#L423) is never used in [dexBlueSettlementModule](dexBlue.sol#L977-L2891)\n",
                "first_markdown_element": "dexBlue.sol#L423",
                "id": "a86089171962b04dd72d0e45d6152517c1735b41416d35221767c28db1a566e0",
                "check": "unused-state",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.feeCollectorLocked (dexBlue.sol#199) is never used in dexBlueSettlementModule (dexBlue.sol#977-2891)\n",
                "markdown": "[dexBlueStorage.feeCollectorLocked](dexBlue.sol#L199) is never used in [dexBlueSettlementModule](dexBlue.sol#L977-L2891)\n",
                "first_markdown_element": "dexBlue.sol#L199",
                "id": "e5749b6859c5b42f57e53ff87e0281803746088f961d1ebb03251cd20236e2c0",
                "check": "unused-state",
                "impact": "Informational",
                "confidence": "High"
            },
            {
                "description": "Loop condition i < public_reserve_arr.length (dexBlue.sol#4427) should use cached array length instead of referencing `length` member of the storage array.\n ",
                "markdown": "Loop condition [i < public_reserve_arr.length](dexBlue.sol#L4427) should use cached array length instead of referencing `length` member of the storage array.\n ",
                "first_markdown_element": "dexBlue.sol#L4427",
                "id": "dca077c328cf104193df1b44ae4d4e434a9e14692edc33574939c6cea96cf42e",
                "check": "cache-array-length",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "Loop condition i < public_reserve_arr.length (dexBlue.sol#2665) should use cached array length instead of referencing `length` member of the storage array.\n ",
                "markdown": "Loop condition [i < public_reserve_arr.length](dexBlue.sol#L2665) should use cached array length instead of referencing `length` member of the storage array.\n ",
                "first_markdown_element": "dexBlue.sol#L2665",
                "id": "df9cabd674b95d7869c123ff21ba7151372ce2305052029eb33f7f21496d47bd",
                "check": "cache-array-length",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.owner (dexBlue.sol#191) should be constant \n",
                "markdown": "[dexBlueStorage.owner](dexBlue.sol#L191) should be constant \n",
                "first_markdown_element": "dexBlue.sol#L191",
                "id": "41d97e6a8c955664e9e57e16c5a8e31d52afa0a07103ea962c8c677459811289",
                "check": "constable-states",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.feeCollector (dexBlue.sol#197) should be constant \n",
                "markdown": "[dexBlueStorage.feeCollector](dexBlue.sol#L197) should be constant \n",
                "first_markdown_element": "dexBlue.sol#L197",
                "id": "4fe640bfcdbe95f753192b7269100cf0df415e2e1a4ecea2f235844da9dfaa7d",
                "check": "constable-states",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.marketActive (dexBlue.sol#195) should be constant \n",
                "markdown": "[dexBlueStorage.marketActive](dexBlue.sol#L195) should be constant \n",
                "first_markdown_element": "dexBlue.sol#L195",
                "id": "506c1f9c3b0498294bf52ad2153217fc9f9e712c1ffbe7579ab7f683f430eb72",
                "check": "constable-states",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "Token.decimals (dexBlue.sol#5389) should be constant \n",
                "markdown": "[Token.decimals](dexBlue.sol#L5389) should be constant \n",
                "first_markdown_element": "dexBlue.sol#L5389",
                "id": "65898dd75607a25790052ea2a483eb672a6c03c708b872b018ffca3b400812d2",
                "check": "constable-states",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.feeCollectorLocked (dexBlue.sol#199) should be constant \n",
                "markdown": "[dexBlueStorage.feeCollectorLocked](dexBlue.sol#L199) should be constant \n",
                "first_markdown_element": "dexBlue.sol#L199",
                "id": "ae18ef84a9b75bdfbdf56933550e5f341fbeabee4b92e20f74392b5c2b2ec745",
                "check": "constable-states",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "dexBlueStorage.single_sig_waiting_period (dexBlue.sol#201) should be constant \n",
                "markdown": "[dexBlueStorage.single_sig_waiting_period](dexBlue.sol#L201) should be constant \n",
                "first_markdown_element": "dexBlue.sol#L201",
                "id": "af2d96914f369e63051239369702f42e9e9aaaef6481fe1f13252310b51c4cc5",
                "check": "constable-states",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "Token.name (dexBlue.sol#5391) should be constant \n",
                "markdown": "[Token.name](dexBlue.sol#L5391) should be constant \n",
                "first_markdown_element": "dexBlue.sol#L5391",
                "id": "bfb23c167737cbdee9fbed9faf24b3949b4e43c218cedc0e37f7a1de4ecb8b84",
                "check": "constable-states",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "dexBlueStructs.EIP712_DOMAIN_SEPARATOR (dexBlue.sol#415) should be constant \n",
                "markdown": "[dexBlueStructs.EIP712_DOMAIN_SEPARATOR](dexBlue.sol#L415) should be constant \n",
                "first_markdown_element": "dexBlue.sol#L415",
                "id": "e1d176c456d6ca212492560c836259a00f15737fef36361dedf123078ac64205",
                "check": "constable-states",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "offerWithData(address,uint256,address,uint256,bytes32[]) should be declared external:\n\t- dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]) (dexBlue.sol#5275)\nMoreover, the following function parameters should change its data location:\ndata location should be calldata\n",
                "markdown": "offerWithData(address,uint256,address,uint256,bytes32[]) should be declared external:\n\t- [dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[])](dexBlue.sol#L5275)\nMoreover, the following function parameters should change its data location:\ndata location should be calldata\n",
                "first_markdown_element": "dexBlue.sol#L5275",
                "id": "0049b438cfa57962208cde20be8f49839f25f3664bbd3b9a7f98b5a2704a8650",
                "check": "external-function",
                "impact": "Optimization",
                "confidence": "High"
            },
            {
                "description": "tradeWithData(address,uint256,address,uint256,bytes32[]) should be declared external:\n\t- dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]) (dexBlue.sol#5263)\nMoreover, the following function parameters should change its data location:\ndata location should be calldata\n",
                "markdown": "tradeWithData(address,uint256,address,uint256,bytes32[]) should be declared external:\n\t- [dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[])](dexBlue.sol#L5263)\nMoreover, the following function parameters should change its data location:\ndata location should be calldata\n",
                "first_markdown_element": "dexBlue.sol#L5263",
                "id": "91d617f9198a8cab45789b20d1ea828273f7a6db15a1ac340e66f72937725da5",
                "check": "external-function",
                "impact": "Optimization",
                "confidence": "High"
            }
        ]
    }
}