digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
! singularDTVToken.transferFrom(msg.sender,this,CAP)

IRs:
TMP_137(bool) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:transferFrom, arguments:['msg.sender', 'this', 'CAP']  
TMP_138 = UnaryType.BANG TMP_137 
CONDITION TMP_138"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_139(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
startDate = now

IRs:
startDate(uint256) := now(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
stage = Stages.GoingAndGoalNotReached

IRs:
REF_72(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalNotReached
stage(SingularDTVLaunch.Stages) := REF_72(SingularDTVLaunch.Stages)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
checkInvariants()

IRs:
INTERNAL_CALL, SingularDTVLaunch.checkInvariants()()"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
startDate

IRs:
RETURN startDate"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SingularDTVLaunch.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
atStage(Stages.Deployed)

IRs:
REF_73(SingularDTVLaunch.Stages) -> Stages.Deployed
MODIFIER_CALL, SingularDTVLaunch.atStage(SingularDTVLaunch.Stages)(REF_73)"];
9->1;
}
