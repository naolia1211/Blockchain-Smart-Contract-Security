digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
valueWEI = msg.value

IRs:
valueWEI(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
valueCent = valueWEI.div(priceUSD)

IRs:
TMP_200(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['valueWEI', 'priceUSD'] 
valueCent(uint256) := TMP_200(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokens = rateCent.mul(valueCent)

IRs:
TMP_201(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rateCent', 'valueCent'] 
tokens(uint256) := TMP_201(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
hardcap = getHardcap()

IRs:
TMP_202(uint256) = INTERNAL_CALL, Crowdsale.getHardcap()()
hardcap(uint256) := TMP_202(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
soldTokens + tokens > hardcap

IRs:
TMP_203(uint256) = soldTokens + tokens
TMP_204(bool) = TMP_203 > hardcap
CONDITION TMP_204"];
5->6[label="True"];
5->12[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokens = hardcap.sub(soldTokens)

IRs:
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['hardcap', 'soldTokens'] 
tokens(uint256) := TMP_205(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
valueCent = tokens.div(rateCent)

IRs:
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['tokens', 'rateCent'] 
valueCent(uint256) := TMP_206(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
valueWEI = valueCent.mul(priceUSD)

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['valueCent', 'priceUSD'] 
valueWEI(uint256) := TMP_207(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
change = msg.value - valueWEI

IRs:
TMP_208(uint256) = msg.value - valueWEI
change(uint256) := TMP_208(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
isSent = msg.sender.call.gas(3000000).value(change)()

IRs:
TMP_211(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:change gas:3000000
isSent(bool) := TMP_211(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(isSent)

IRs:
TMP_212(None) = SOLIDITY_CALL require(bool)(isSent)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
token.mint(msg.sender,tokens)

IRs:
TMP_213(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:mint, arguments:['msg.sender', 'tokens']  "];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
collectedCent += valueCent

IRs:
collectedCent(uint256) = collectedCent + valueCent"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
soldTokens += tokens

IRs:
soldTokens(uint256) = soldTokens + tokens"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
state == State.PreIco

IRs:
REF_153(Stateful.State) -> State.PreIco
TMP_214(bool) = state == REF_153
CONDITION TMP_214"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
preICOinvestors[msg.sender] += tokens

IRs:
REF_154(uint256) -> preICOinvestors[msg.sender]
REF_154(-> preICOinvestors) = REF_154 + tokens"];
17->19;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ICOinvestors[msg.sender] += tokens

IRs:
REF_155(uint256) -> ICOinvestors[msg.sender]
REF_155(-> ICOinvestors) = REF_155 + tokens"];
18->19;
19[label="Node Type: END_IF 19
"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
saleIsOn()

IRs:
MODIFIER_CALL, Crowdsale.saleIsOn()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isUnderHardCap()

IRs:
MODIFIER_CALL, Crowdsale.isUnderHardCap()()"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
22->1;
}
