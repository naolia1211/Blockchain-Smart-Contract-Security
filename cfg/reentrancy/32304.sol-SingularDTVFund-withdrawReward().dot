digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
value = calcReward(msg.sender) + owed[msg.sender]

IRs:
TMP_48(uint256) = INTERNAL_CALL, SingularDTVFund.calcReward(address)(msg.sender)
REF_36(uint256) -> owed[msg.sender]
TMP_49(uint256) = TMP_48 + REF_36
value(uint256) := TMP_49(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rewardAtTimeOfWithdraw[msg.sender] = totalReward

IRs:
REF_37(uint256) -> rewardAtTimeOfWithdraw[msg.sender]
REF_37(uint256) (->rewardAtTimeOfWithdraw) := totalReward(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owed[msg.sender] = 0

IRs:
REF_38(uint256) -> owed[msg.sender]
REF_38(uint256) (->owed) := 0(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
value > 0 && ! msg.sender.send(value)

IRs:
TMP_50(bool) = value > 0
TMP_51 = SEND dest:msg.sender value:value
TMP_52 = UnaryType.BANG TMP_51 
TMP_53(bool) = TMP_50 && TMP_52
CONDITION TMP_53"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_54(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
value

IRs:
RETURN value"];
}
