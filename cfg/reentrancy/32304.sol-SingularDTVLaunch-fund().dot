digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->30;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenCount = (msg.value * (10 ** 18)) / valuePerToken

IRs:
TMP_73(uint256) = 10 ** 18
TMP_74(uint256) = msg.value * TMP_73
TMP_75(uint256) = TMP_74 / valuePerToken
tokenCount(uint256) := TMP_75(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokenCount > 0)

IRs:
TMP_76(bool) = tokenCount > 0
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
tokensSent + tokenCount > CAP

IRs:
TMP_78(uint256) = tokensSent + tokenCount
TMP_79(bool) = TMP_78 > CAP
CONDITION TMP_79"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenCount = CAP - tokensSent

IRs:
TMP_80(uint256) = CAP - tokensSent
tokenCount(uint256) := TMP_80(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokensSent += tokenCount

IRs:
tokensSent(uint256) = tokensSent + tokenCount"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
contribution = (tokenCount * valuePerToken) / (10 ** 18)

IRs:
TMP_81(uint256) = tokenCount * valuePerToken
TMP_82(uint256) = 10 ** 18
TMP_83(uint256) = TMP_81 / TMP_82
contribution(uint256) := TMP_83(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
msg.value > contribution && ! msg.sender.send(msg.value - contribution)

IRs:
TMP_84(bool) = msg.value > contribution
TMP_85(uint256) = msg.value - contribution
TMP_86 = SEND dest:msg.sender value:TMP_85
TMP_87 = UnaryType.BANG TMP_86 
TMP_88(bool) = TMP_84 && TMP_87
CONDITION TMP_88"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
revert()()

IRs:
TMP_89(None) = SOLIDITY_CALL revert()()"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
fundBalance += contribution

IRs:
fundBalance(uint256) = fundBalance + contribution"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
contributions[msg.sender] += contribution

IRs:
REF_48(uint256) -> contributions[msg.sender]
REF_48(-> contributions) = REF_48 + contribution"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
sentTokens[msg.sender] += tokenCount

IRs:
REF_49(uint256) -> sentTokens[msg.sender]
REF_49(-> sentTokens) = REF_49 + tokenCount"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! singularDTVToken.transfer(msg.sender,tokenCount)

IRs:
TMP_90(bool) = HIGH_LEVEL_CALL, dest:singularDTVToken(AbstractSingularDTVToken), function:transfer, arguments:['msg.sender', 'tokenCount']  
TMP_91 = UnaryType.BANG TMP_90 
CONDITION TMP_91"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
revert()()

IRs:
TMP_92(None) = SOLIDITY_CALL revert()()"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
stage == Stages.GoingAndGoalNotReached

IRs:
REF_51(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalNotReached
TMP_93(bool) = stage == REF_51
CONDITION TMP_93"];
17->18[label="True"];
17->21[label="False"];
18[label="Node Type: IF 18

EXPRESSION:
tokensSent >= TOKEN_TARGET

IRs:
TMP_94(bool) = tokensSent >= TOKEN_TARGET
CONDITION TMP_94"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
stage = Stages.GoingAndGoalReached

IRs:
REF_52(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalReached
stage(SingularDTVLaunch.Stages) := REF_52(SingularDTVLaunch.Stages)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
stage == Stages.GoingAndGoalReached

IRs:
REF_53(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalReached
TMP_95(bool) = stage == REF_53
CONDITION TMP_95"];
22->23[label="True"];
22->26[label="False"];
23[label="Node Type: IF 23

EXPRESSION:
tokensSent == CAP

IRs:
TMP_96(bool) = tokensSent == CAP
CONDITION TMP_96"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
stage = Stages.EndedAndGoalReached

IRs:
REF_54(SingularDTVLaunch.Stages) -> Stages.EndedAndGoalReached
stage(SingularDTVLaunch.Stages) := REF_54(SingularDTVLaunch.Stages)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
checkInvariants()

IRs:
INTERNAL_CALL, SingularDTVLaunch.checkInvariants()()"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
Contributed(msg.sender,contribution,tokenCount)

IRs:
Emit Contributed(msg.sender,contribution,tokenCount)"];
28->29;
29[label="Node Type: RETURN 29

EXPRESSION:
tokenCount

IRs:
RETURN tokenCount"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
timedTransitions()

IRs:
MODIFIER_CALL, SingularDTVLaunch.timedTransitions()()"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
atStageOR(Stages.GoingAndGoalNotReached,Stages.GoingAndGoalReached)

IRs:
REF_55(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalNotReached
REF_56(SingularDTVLaunch.Stages) -> Stages.GoingAndGoalReached
MODIFIER_CALL, SingularDTVLaunch.atStageOR(SingularDTVLaunch.Stages,SingularDTVLaunch.Stages)(REF_55,REF_56)"];
31->1;
}
