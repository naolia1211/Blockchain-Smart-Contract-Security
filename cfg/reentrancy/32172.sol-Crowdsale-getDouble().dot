digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->15;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(state == State.ICO || state == State.companySold)

IRs:
REF_131(Stateful.State) -> State.ICO
TMP_190(bool) = state == REF_131
REF_132(Stateful.State) -> State.companySold
TMP_191(bool) = state == REF_132
TMP_192(bool) = TMP_190 || TMP_191
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
state == State.ICO

IRs:
REF_133(Stateful.State) -> State.ICO
TMP_194(bool) = state == REF_133
CONDITION TMP_194"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
extraTokensAmount = preICOinvestors[msg.sender]

IRs:
REF_134(uint256) -> preICOinvestors[msg.sender]
extraTokensAmount(uint256) := REF_134(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
preICOinvestors[msg.sender] = 0

IRs:
REF_135(uint256) -> preICOinvestors[msg.sender]
REF_135(uint256) (->preICOinvestors) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token.mint(msg.sender,extraTokensAmount)

IRs:
TMP_195(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:mint, arguments:['msg.sender', 'extraTokensAmount']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ICOinvestors[msg.sender] += extraTokensAmount

IRs:
REF_137(uint256) -> ICOinvestors[msg.sender]
REF_137(-> ICOinvestors) = REF_137 + extraTokensAmount"];
7->14;
8[label="Node Type: IF 8

EXPRESSION:
state == State.companySold

IRs:
REF_138(Stateful.State) -> State.companySold
TMP_196(bool) = state == REF_138
CONDITION TMP_196"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
extraTokensAmount = preICOinvestors[msg.sender] + ICOinvestors[msg.sender]

IRs:
REF_139(uint256) -> preICOinvestors[msg.sender]
REF_140(uint256) -> ICOinvestors[msg.sender]
TMP_197(uint256) = REF_139 + REF_140
extraTokensAmount(uint256) := TMP_197(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
preICOinvestors[msg.sender] = 0

IRs:
REF_141(uint256) -> preICOinvestors[msg.sender]
REF_141(uint256) (->preICOinvestors) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ICOinvestors[msg.sender] = 0

IRs:
REF_142(uint256) -> ICOinvestors[msg.sender]
REF_142(uint256) (->ICOinvestors) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
token.mint(msg.sender,extraTokensAmount)

IRs:
TMP_198(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:mint, arguments:['msg.sender', 'extraTokensAmount']  "];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
15->1;
}
