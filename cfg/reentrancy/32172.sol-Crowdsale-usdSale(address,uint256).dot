digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
valueCent = _valueUSD * 100

IRs:
TMP_136(uint256) = _valueUSD * 100
valueCent(uint256) := TMP_136(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokensAmount = rateCent.mul(valueCent)

IRs:
TMP_137(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['rateCent', 'valueCent'] 
tokensAmount(uint256) := TMP_137(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
collectedCent += valueCent

IRs:
collectedCent(uint256) = collectedCent + valueCent"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
token.mint(_to,tokensAmount)

IRs:
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token(BSEToken), function:mint, arguments:['_to', 'tokensAmount']  "];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
state == State.ICO || state == State.preIcoFinished

IRs:
REF_103(Stateful.State) -> State.ICO
TMP_139(bool) = state == REF_103
REF_104(Stateful.State) -> State.preIcoFinished
TMP_140(bool) = state == REF_104
TMP_141(bool) = TMP_139 || TMP_140
CONDITION TMP_141"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ICOinvestors[_to] += tokensAmount

IRs:
REF_105(uint256) -> ICOinvestors[_to]
REF_105(-> ICOinvestors) = REF_105 + tokensAmount"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
preICOinvestors[_to] += tokensAmount

IRs:
REF_106(uint256) -> preICOinvestors[_to]
REF_106(-> preICOinvestors) = REF_106 + tokensAmount"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
soldTokens += tokensAmount

IRs:
soldTokens(uint256) = soldTokens + tokensAmount"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
