digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_weiValue <= this.balance)

IRs:
REF_39(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_63(bool) = _weiValue <= REF_39
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
txTaskMap[txCounter] = Task({taskType:2,receiver:_to,value:_weiValue,tokenContractAddress:address(0),functionIdentifier:bytes4(0),acceptedCounter:0,completed:false})

IRs:
REF_40(FsTkCMultiSigWallet.Task) -> txTaskMap[txCounter]
TMP_65 = CONVERT 0 to address
TMP_66 = CONVERT 0 to bytes4
TMP_67(FsTkCMultiSigWallet.Task) = new Task(2,_to,_weiValue,TMP_65,TMP_66,0,False)
REF_40(FsTkCMultiSigWallet.Task) (->txTaskMap) := TMP_67(FsTkCMultiSigWallet.Task)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
TransferEtherInitiationEvent(txCounter,msg.sender,_to,_weiValue)

IRs:
Emit TransferEtherInitiationEvent(txCounter,msg.sender,_to,_weiValue)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
acceptTxTask(txCounter)

IRs:
TMP_69(bool) = INTERNAL_CALL, FsTkCMultiSigWallet.acceptTxTask(uint256)(txCounter)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
txCounter ++

IRs:
TMP_70(uint256) := txCounter(uint256)
txCounter(uint256) = txCounter + 1"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyCommitteesAfterInitialization()

IRs:
MODIFIER_CALL, FsTkCMultiSigWallet.onlyCommitteesAfterInitialization()()"];
7->1;
}
