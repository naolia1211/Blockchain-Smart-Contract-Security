digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_token0 = token0

IRs:
_token0(address) := token0(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_token1 = token1

IRs:
_token1(address) := token1(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_safeTransfer(_token0,to,IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0))

IRs:
TMP_290 = CONVERT _token0 to IERC20Uniswap
TMP_291 = CONVERT this to address
TMP_292(uint256) = HIGH_LEVEL_CALL, dest:TMP_290(IERC20Uniswap), function:balanceOf, arguments:['TMP_291']  
TMP_293(uint256) = LIBRARY_CALL, dest:SafeMathUniswap, function:SafeMathUniswap.sub(uint256,uint256), arguments:['TMP_292', 'reserve0'] 
INTERNAL_CALL, UniswapV2Pair._safeTransfer(address,address,uint256)(_token0,to,TMP_293)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_safeTransfer(_token1,to,IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1))

IRs:
TMP_295 = CONVERT _token1 to IERC20Uniswap
TMP_296 = CONVERT this to address
TMP_297(uint256) = HIGH_LEVEL_CALL, dest:TMP_295(IERC20Uniswap), function:balanceOf, arguments:['TMP_296']  
TMP_298(uint256) = LIBRARY_CALL, dest:SafeMathUniswap, function:SafeMathUniswap.sub(uint256,uint256), arguments:['TMP_297', 'reserve1'] 
INTERNAL_CALL, UniswapV2Pair._safeTransfer(address,address,uint256)(_token1,to,TMP_298)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lock()

IRs:
MODIFIER_CALL, UniswapV2Pair.lock()()"];
5->1;
}
